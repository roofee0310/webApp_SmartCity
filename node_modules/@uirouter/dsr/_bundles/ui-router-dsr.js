/**
 * UI-Router Deep State Redirect: redirect to the most recently activated child state
 * @version v1.2.0
 * @link https://ui-router.github.io
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@uirouter/core')) :
    typeof define === 'function' && define.amd ? define(['exports', '@uirouter/core'], factory) :
    (global = global || self, factory(global['@uirouter/dsr'] = {}, global['@uirouter/core']));
}(this, (function (exports, core) { 'use strict';

    var __extends = (undefined && undefined.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var StateObjectDataStore = /** @class */ (function () {
        function StateObjectDataStore() {
        }
        StateObjectDataStore.prototype.getState = function (stateOrName) {
            var state = this.router.stateService.get(stateOrName);
            return state && state.$$state();
        };
        StateObjectDataStore.prototype.init = function (router) {
            this.router = router;
        };
        StateObjectDataStore.prototype.get = function (stateOrName) {
            return this.getState(stateOrName).$dsr || [];
        };
        StateObjectDataStore.prototype.set = function (stateOrName, recordedDsr) {
            var state = this.getState(stateOrName);
            if (recordedDsr) {
                state.$dsr = recordedDsr;
            }
            else {
                delete state.$dsr;
            }
        };
        return StateObjectDataStore;
    }());
    var LocalStorageDataStore = /** @class */ (function () {
        function LocalStorageDataStore(storage) {
            this.key = 'uiRouterDeepStateRedirect';
            this._storage = localStorage;
            this._storage = storage || localStorage;
        }
        LocalStorageDataStore.prototype.getStore = function () {
            var item = this._storage.getItem(this.key);
            return JSON.parse(item || '{}');
        };
        LocalStorageDataStore.prototype.setStore = function (contents) {
            if (contents) {
                try {
                    this._storage.setItem(this.key, JSON.stringify(contents));
                }
                catch (err) {
                    console.error('UI-Router Deep State Redirect: cannot store object in LocalStorage.  Is there a circular reference?', contents);
                    console.error(err);
                }
            }
            else {
                this._storage.removeItem(this.key);
            }
        };
        LocalStorageDataStore.prototype.getStateName = function (stateOrName) {
            var state = this.router.stateService.get(stateOrName);
            return state && state.name;
        };
        LocalStorageDataStore.prototype.init = function (router) {
            this.router = router;
        };
        LocalStorageDataStore.prototype.get = function (stateOrName) {
            var stateName = this.getStateName(stateOrName);
            var store = this.getStore();
            return store[stateName] || [];
        };
        LocalStorageDataStore.prototype.set = function (stateOrName, recordedDsr) {
            var stateName = this.getStateName(stateOrName);
            var store = this.getStore();
            store[stateName] = recordedDsr;
            this.setStore(store);
        };
        return LocalStorageDataStore;
    }());
    var SessionStorageDataStore = /** @class */ (function (_super) {
        __extends(SessionStorageDataStore, _super);
        function SessionStorageDataStore() {
            return _super.call(this, sessionStorage) || this;
        }
        return SessionStorageDataStore;
    }(LocalStorageDataStore));

    var DSRPlugin = /** @class */ (function () {
        function DSRPlugin($uiRouter, options) {
            var _this = this;
            this.name = 'deep-state-redirect';
            this.hookDeregFns = [];
            this.$transitions = $uiRouter.transitionService;
            this.$state = $uiRouter.stateService;
            this.dataStore = (options && options.dataStore) || new StateObjectDataStore();
            this.dataStore.init($uiRouter);
            this.hookDeregFns.push(this.$transitions.onRetain({ retained: function (state) { return !!_this.getDsrProp(state.self); } }, this.recordDeepState.bind(this)));
            this.hookDeregFns.push(this.$transitions.onEnter({ entering: function (state) { return !!_this.getDsrProp(state.self); } }, this.recordDeepState.bind(this)));
            this.hookDeregFns.push(this.$transitions.onBefore({ to: function (state) { return !!_this.getDsrProp(state.self); } }, this.deepStateRedirect.bind(this)));
        }
        DSRPlugin.prototype.dispose = function (router) {
            this.hookDeregFns.forEach(function (fn) { return fn(); });
        };
        /**
         * Resets deep state redirect
         *
         * A deep state is recorded for each DSR state.
         * This function resets recorded deep state redirect(s) to the initial value.
         *
         * If called with no parameters, the redirects for all states are reset.
         *
         * If called with a `state` parameter, the redirect for that state is reset.
         *
         * If called with `state` and `params` parameters, the redirect for that state and set of parameter values is reset.
         *
         * @param state (optional) the redirect for this state will be reset
         * @param params (optional) the redirect for the state and parameters will be reset
         */
        DSRPlugin.prototype.reset = function (state, params) {
            var _this = this;
            var $state = this.$state;
            if (!state) {
                $state.get().forEach(function (_state) { return _this.dataStore.set(_state, undefined); });
            }
            else if (!params) {
                this.dataStore.set(state, undefined);
            }
            else {
                var currentDSRS = this.dataStore.get(state);
                var $$state = $state.get(state).$$state();
                this.dataStore.set(state, currentDSRS.filter(this.paramsEqual($$state, params, undefined, true)));
            }
        };
        /**
         * Returns the recorded redirect
         *
         * Returns the recorded redirect for a given DSR `state` (and optionally `params`).
         *
         * @param state the DSR state
         * @param params (optional) the parameter values
         *
         * @returns the recorded redirect `TargetState`
         */
        DSRPlugin.prototype.getRedirect = function (state, params) {
            return this.getDeepStateRedirect(state, params);
        };
        DSRPlugin.prototype.getDsrProp = function (state) {
            return state.deepStateRedirect || state.dsr;
        };
        DSRPlugin.prototype.getConfig = function (state) {
            var $state = this.$state;
            var dsrProp = this.getDsrProp(state);
            if (typeof dsrProp === 'undefined')
                return;
            var params;
            var defaultTarget = typeof dsrProp === 'string' ? $state.target(dsrProp) : undefined;
            var fn = typeof dsrProp === 'function' ? dsrProp : undefined;
            if (typeof dsrProp === 'object') {
                fn = dsrProp.fn;
                if (typeof dsrProp.default === 'object') {
                    defaultTarget = $state.target(dsrProp.default.state, dsrProp.default.params, dsrProp.default.options);
                }
                else if (typeof dsrProp.default === 'string') {
                    defaultTarget = $state.target(dsrProp.default);
                }
                var paramsProp_1 = dsrProp.params;
                if (paramsProp_1 === true) {
                    params = function () { return true; };
                }
                else if (Array.isArray(paramsProp_1)) {
                    params = function (param) { return paramsProp_1.indexOf(param.id) !== -1; };
                }
            }
            fn = fn || (function (transition, target) { return target; });
            return { default: defaultTarget, params: params, fn: fn };
        };
        DSRPlugin.prototype.paramsEqual = function (state, transParams, paramPredicate, negate) {
            if (paramPredicate === void 0) { paramPredicate = function () { return true; }; }
            if (negate === void 0) { negate = false; }
            var schema = state.parameters({ inherit: true }).filter(paramPredicate);
            return function (redirect) {
                var equals = core.Param.equals(schema, redirect.triggerParams, transParams);
                return negate ? !equals : equals;
            };
        };
        DSRPlugin.prototype.recordDeepState = function (transition, state) {
            var _this = this;
            var $state = this.$state;
            var hasParamsConfig = !!this.getConfig(state).params;
            var _state = state.$$state();
            transition.promise.then(function () {
                var transTo = transition.to();
                var triggerParams = transition.params();
                var target = $state.target(transTo, triggerParams);
                var targetStateName = target.name();
                var targetParams = target.params();
                var recordedDSR = { triggerParams: triggerParams, targetStateName: targetStateName, targetParams: targetParams };
                if (hasParamsConfig) {
                    var currentDSRS = _this.dataStore.get(_state);
                    var predicate = _this.paramsEqual(transTo.$$state(), triggerParams, _this.getConfig(state).params, true);
                    var updatedDSRS = currentDSRS.filter(predicate).concat(recordedDSR);
                    _this.dataStore.set(_state, updatedDSRS);
                }
                else {
                    _this.dataStore.set(_state, [recordedDSR]);
                }
            });
        };
        DSRPlugin.prototype.deepStateRedirect = function (transition) {
            var opts = transition.options();
            if (opts['ignoreDsr'] || (opts.custom && opts.custom.ignoreDsr))
                return;
            var config = this.getConfig(transition.to());
            var redirect = this.getDeepStateRedirect(transition.to(), transition.params());
            redirect = config.fn(transition, redirect);
            if (redirect && redirect.state() === transition.to())
                return;
            return redirect;
        };
        DSRPlugin.prototype.getTargetState = function (dsr) {
            return this.$state.target(dsr.targetStateName, dsr.targetParams);
        };
        DSRPlugin.prototype.getDeepStateRedirect = function (stateOrName, params) {
            var $state = this.$state;
            var _state = $state.get(stateOrName);
            var state = _state && _state.$$state();
            var config = this.getConfig(_state);
            var currentDSRS = this.dataStore.get(stateOrName);
            var recordedDSR;
            if (config.params) {
                var predicate = this.paramsEqual(state, params, config.params, false);
                var match = currentDSRS.find(predicate);
                recordedDSR = match && match;
            }
            else {
                recordedDSR = currentDSRS[0] && currentDSRS[0];
            }
            var dsrTarget = recordedDSR ? this.getTargetState(recordedDSR) : config.default;
            if (dsrTarget) {
                // merge original params with deep state redirect params
                var targetParams = Object.assign({}, params, dsrTarget.params());
                dsrTarget = $state.target(dsrTarget.state(), targetParams, dsrTarget.options());
            }
            return dsrTarget;
        };
        return DSRPlugin;
    }());

    exports.DSRPlugin = DSRPlugin;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ui-router-dsr.js.map
