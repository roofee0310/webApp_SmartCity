{"version":3,"file":"ui-router-dsr.min.js","sources":["../src/DSRDataStore.ts","../src/dsr.ts"],"sourcesContent":["import { StateOrName, UIRouter } from '@uirouter/core';\nimport { RecordedDSR } from './interface';\n\nexport interface DSRDataStore {\n  init(router: UIRouter): void;\n  // Gets the remembered DSR target state for a given state and params\n  get(state: StateOrName): RecordedDSR[];\n  // Sets the remembered DSR target state for a given state and params\n  set(state: StateOrName, recordedDSR: RecordedDSR[] | undefined): void;\n}\n\nexport class StateObjectDataStore implements DSRDataStore {\n  private router: UIRouter;\n\n  private getState(stateOrName: StateOrName) {\n    const state = this.router.stateService.get(stateOrName);\n    return state && state.$$state();\n  }\n\n  public init(router: UIRouter): void {\n    this.router = router;\n  }\n\n  public get(stateOrName: StateOrName): RecordedDSR[] {\n    return this.getState(stateOrName).$dsr || [];\n  }\n\n  public set(stateOrName: StateOrName, recordedDsr: RecordedDSR[]): void {\n    const state = this.getState(stateOrName);\n    if (recordedDsr) {\n      state.$dsr = recordedDsr;\n    } else {\n      delete state.$dsr;\n    }\n  }\n}\n\nexport class LocalStorageDataStore implements DSRDataStore {\n  private router: UIRouter;\n  private key = 'uiRouterDeepStateRedirect';\n  private _storage: Storage = localStorage;\n\n  constructor(storage?: Storage) {\n    this._storage = storage || localStorage;\n  }\n\n  private getStore() {\n    const item = this._storage.getItem(this.key);\n    return JSON.parse(item || '{}');\n  }\n\n  private setStore(contents: any) {\n    if (contents) {\n      try {\n        this._storage.setItem(this.key, JSON.stringify(contents));\n      } catch (err) {\n        console.error(\n          'UI-Router Deep State Redirect: cannot store object in LocalStorage.  Is there a circular reference?',\n          contents\n        );\n        console.error(err);\n      }\n    } else {\n      this._storage.removeItem(this.key);\n    }\n  }\n\n  private getStateName(stateOrName: StateOrName) {\n    const state = this.router.stateService.get(stateOrName);\n    return state && state.name;\n  }\n\n  public init(router: UIRouter): void {\n    this.router = router;\n  }\n\n  public get(stateOrName: StateOrName): RecordedDSR[] {\n    const stateName = this.getStateName(stateOrName);\n    const store = this.getStore();\n    return store[stateName] || [];\n  }\n\n  public set(stateOrName: StateOrName, recordedDsr: RecordedDSR[]): void {\n    const stateName = this.getStateName(stateOrName);\n    const store = this.getStore();\n    store[stateName] = recordedDsr;\n    this.setStore(store);\n  }\n}\n\nexport class SessionStorageDataStore extends LocalStorageDataStore {\n  constructor() {\n    super(sessionStorage);\n  }\n}\n","import {\n  StateObject,\n  StateDeclaration,\n  Param,\n  UIRouter,\n  RawParams,\n  StateOrName,\n  TargetState,\n  Transition,\n  UIRouterPlugin,\n  TransitionService,\n  StateService,\n} from '@uirouter/core';\n\nimport { DSRDataStore, StateObjectDataStore } from './DSRDataStore';\nimport { _DSRConfig, DSRConfigObj, DSRFunction, DSRProp, ParamPredicate, RecordedDSR } from './interface';\n\nclass DSRPlugin implements UIRouterPlugin {\n  name = 'deep-state-redirect';\n\n  dataStore: DSRDataStore;\n  $transitions: TransitionService;\n  $state: StateService;\n  hookDeregFns = [];\n\n  constructor($uiRouter: UIRouter, options: { dataStore: DSRDataStore }) {\n    this.$transitions = $uiRouter.transitionService;\n    this.$state = $uiRouter.stateService;\n    this.dataStore = (options && options.dataStore) || new StateObjectDataStore();\n    this.dataStore.init($uiRouter);\n\n    this.hookDeregFns.push(\n      this.$transitions.onRetain({ retained: state => !!this.getDsrProp(state.self) }, this.recordDeepState.bind(this))\n    );\n    this.hookDeregFns.push(\n      this.$transitions.onEnter({ entering: state => !!this.getDsrProp(state.self) }, this.recordDeepState.bind(this))\n    );\n    this.hookDeregFns.push(\n      this.$transitions.onBefore({ to: state => !!this.getDsrProp(state.self) }, this.deepStateRedirect.bind(this))\n    );\n  }\n\n  dispose(router: UIRouter): void {\n    this.hookDeregFns.forEach(fn => fn());\n  }\n\n  /**\n   * Resets deep state redirect\n   *\n   * A deep state is recorded for each DSR state.\n   * This function resets recorded deep state redirect(s) to the initial value.\n   *\n   * If called with no parameters, the redirects for all states are reset.\n   *\n   * If called with a `state` parameter, the redirect for that state is reset.\n   *\n   * If called with `state` and `params` parameters, the redirect for that state and set of parameter values is reset.\n   *\n   * @param state (optional) the redirect for this state will be reset\n   * @param params (optional) the redirect for the state and parameters will be reset\n   */\n  reset(state?: StateOrName, params?: RawParams): void {\n    const { $state } = this;\n    if (!state) {\n      $state.get().forEach(_state => this.dataStore.set(_state, undefined));\n    } else if (!params) {\n      this.dataStore.set(state, undefined);\n    } else {\n      const currentDSRS = this.dataStore.get(state);\n      const $$state = $state.get(state).$$state();\n      this.dataStore.set(state, currentDSRS.filter(this.paramsEqual($$state, params, undefined, true)));\n    }\n  }\n\n  /**\n   * Returns the recorded redirect\n   *\n   * Returns the recorded redirect for a given DSR `state` (and optionally `params`).\n   *\n   * @param state the DSR state\n   * @param params (optional) the parameter values\n   *\n   * @returns the recorded redirect `TargetState`\n   */\n  getRedirect(state: StateOrName, params?: RawParams): TargetState {\n    return this.getDeepStateRedirect(state, params);\n  }\n\n  private getDsrProp(state: StateDeclaration): DSRProp {\n    return state.deepStateRedirect || state.dsr;\n  }\n\n  public getConfig(state: StateDeclaration): _DSRConfig {\n    const { $state } = this;\n    const dsrProp: DSRProp = this.getDsrProp(state);\n    if (typeof dsrProp === 'undefined') return;\n\n    let params: ParamPredicate;\n    let defaultTarget: TargetState = typeof dsrProp === 'string' ? $state.target(dsrProp) : undefined;\n    let fn: DSRFunction = typeof dsrProp === 'function' ? dsrProp : undefined;\n\n    if (typeof dsrProp === 'object') {\n      fn = dsrProp.fn;\n      if (typeof dsrProp.default === 'object') {\n        defaultTarget = $state.target(dsrProp.default.state, dsrProp.default.params, dsrProp.default.options);\n      } else if (typeof dsrProp.default === 'string') {\n        defaultTarget = $state.target(dsrProp.default);\n      }\n\n      const paramsProp = (dsrProp as DSRConfigObj).params;\n\n      if (paramsProp === true) {\n        params = () => true;\n      } else if (Array.isArray(paramsProp)) {\n        params = (param: Param) => paramsProp.indexOf(param.id) !== -1;\n      }\n    }\n\n    fn = fn || (((transition: Transition, target: TargetState) => target) as DSRFunction);\n\n    return { default: defaultTarget, params, fn };\n  }\n\n  public paramsEqual(\n    state: StateObject,\n    transParams: RawParams,\n    paramPredicate: ParamPredicate = () => true,\n    negate = false\n  ): (redirect: RecordedDSR) => boolean {\n    const schema = state.parameters({ inherit: true }).filter(paramPredicate);\n\n    return (redirect: RecordedDSR) => {\n      const equals = Param.equals(schema, redirect.triggerParams, transParams);\n      return negate ? !equals : equals;\n    };\n  }\n\n  private recordDeepState(transition: Transition, state: StateDeclaration): void {\n    const { $state } = this;\n    const hasParamsConfig: boolean = !!this.getConfig(state).params;\n    const _state: StateObject = state.$$state();\n\n    transition.promise.then(() => {\n      const transTo = transition.to();\n      const triggerParams = transition.params();\n      const target: TargetState = $state.target(transTo, triggerParams);\n      const targetStateName = target.name();\n      const targetParams = target.params();\n      const recordedDSR: RecordedDSR = { triggerParams, targetStateName, targetParams };\n\n      if (hasParamsConfig) {\n        const currentDSRS: RecordedDSR[] = this.dataStore.get(_state);\n        const predicate = this.paramsEqual(transTo.$$state(), triggerParams, this.getConfig(state).params, true);\n        const updatedDSRS = currentDSRS.filter(predicate).concat(recordedDSR);\n        this.dataStore.set(_state, updatedDSRS);\n      } else {\n        this.dataStore.set(_state, [recordedDSR]);\n      }\n    });\n  }\n\n  private deepStateRedirect(transition: Transition): TargetState | undefined {\n    const opts = transition.options();\n    if (opts['ignoreDsr'] || (opts.custom && opts.custom.ignoreDsr)) return;\n\n    const config: _DSRConfig = this.getConfig(transition.to());\n    let redirect: TargetState = this.getDeepStateRedirect(transition.to(), transition.params());\n\n    redirect = config.fn(transition, redirect);\n\n    if (redirect && redirect.state() === transition.to()) return;\n\n    return redirect;\n  }\n\n  private getTargetState(dsr: RecordedDSR): TargetState {\n    return this.$state.target(dsr.targetStateName, dsr.targetParams);\n  }\n\n  private getDeepStateRedirect(stateOrName: StateOrName, params: RawParams): TargetState {\n    const { $state } = this;\n    const _state = $state.get(stateOrName);\n    const state = _state && _state.$$state();\n    const config: _DSRConfig = this.getConfig(_state);\n    const currentDSRS = this.dataStore.get(stateOrName);\n    let recordedDSR: RecordedDSR;\n\n    if (config.params) {\n      const predicate = this.paramsEqual(state, params, config.params, false);\n      const match = currentDSRS.find(predicate);\n      recordedDSR = match && match;\n    } else {\n      recordedDSR = currentDSRS[0] && currentDSRS[0];\n    }\n\n    let dsrTarget = recordedDSR ? this.getTargetState(recordedDSR) : config.default;\n\n    if (dsrTarget) {\n      // merge original params with deep state redirect params\n      const targetParams = Object.assign({}, params, dsrTarget.params());\n      dsrTarget = $state.target(dsrTarget.state(), targetParams, dsrTarget.options());\n    }\n\n    return dsrTarget;\n  }\n}\n\nexport { DSRPlugin };\n"],"names":["StateObjectDataStore","stateOrName","state","this","router","stateService","get","$$state","getState","$dsr","recordedDsr","LocalStorageDataStore","item","_storage","getItem","key","JSON","parse","contents","setItem","stringify","err","console","error","removeItem","name","stateName","getStateName","getStore","store","setStore","storage","localStorage","__extends","_super","sessionStorage","DSRPlugin","hookDeregFns","forEach","fn","params","$state","currentDSRS","dataStore","set","filter","paramsEqual","undefined","_state","_this","getDeepStateRedirect","deepStateRedirect","dsr","dsrProp","getDsrProp","defaultTarget","target","default","options","paramsProp_1","Array","isArray","param","indexOf","id","transition","transParams","paramPredicate","negate","schema","parameters","inherit","redirect","equals","Param","triggerParams","hasParamsConfig","getConfig","promise","then","transTo","to","recordedDSR","targetStateName","targetParams","predicate","updatedDSRS","concat","opts","custom","ignoreDsr","config","match","find","dsrTarget","getTargetState","Object","assign","$uiRouter","$transitions","transitionService","init","push","onRetain","retained","self","recordDeepState","bind","onEnter","entering","onBefore"],"mappings":"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"}