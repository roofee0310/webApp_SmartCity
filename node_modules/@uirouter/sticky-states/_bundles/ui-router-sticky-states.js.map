{"version":3,"file":"ui-router-sticky-states.js","sources":["../src/stickyStates.ts"],"sourcesContent":["import {\n  UIRouter,\n  PathUtils,\n  StateOrName,\n  StateObject,\n  StateDeclaration,\n  PathNode,\n  TreeChanges,\n  Transition,\n  UIRouterPluginBase,\n  TransitionHookPhase,\n  TransitionHookScope,\n  TransitionServicePluginAPI,\n  HookMatchCriteria,\n  TransitionStateHookFn,\n  HookRegOptions,\n  PathType,\n  find,\n  tail,\n  isString,\n  isArray,\n  inArray,\n  removeFrom,\n  pushTo,\n  identity,\n  anyTrueR,\n  assertMap,\n  uniqR,\n  defaultTransOpts,\n  HookMatchCriterion,\n  isFunction,\n  not,\n  Predicate,\n  extend,\n} from '@uirouter/core';\n\ndeclare module '@uirouter/core/lib/state/interface' {\n  interface StateDeclaration {\n    // tslint:disable-line:no-shadowed-variable\n    sticky?: boolean;\n    onInactivate?: TransitionStateHookFn;\n    onReactivate?: TransitionStateHookFn;\n  }\n}\n\ndeclare module '@uirouter/core/lib/state/stateObject' {\n  interface StateObject {\n    // tslint:disable-line:no-shadowed-variable\n    sticky?: boolean;\n    onInactivate?: TransitionStateHookFn;\n    onReactivate?: TransitionStateHookFn;\n  }\n}\n\ndeclare module '@uirouter/core/lib/transition/transitionService' {\n  interface TransitionService {\n    onInactivate: (criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) => Function;\n    onReactivate: (criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) => Function;\n  }\n}\n\ndeclare module '@uirouter/core/lib/transition/interface' {\n  interface TransitionOptions {\n    exitSticky?: StateOrName[] | StateOrName;\n  }\n\n  interface TreeChanges {\n    // tslint:disable-line:no-shadowed-variable\n    inactivating?: PathNode[];\n    reactivating?: PathNode[];\n  }\n\n  export interface IMatchingNodes {\n    inactivating: PathNode[];\n    reactivating: PathNode[];\n  }\n\n  export interface PathTypes {\n    inactivating: PathType;\n    reactivating: PathType;\n  }\n\n  export interface HookMatchCriteria {\n    // tslint:disable-line:no-shadowed-variable\n    /** A [[HookMatchCriterion]] to match any state that would be inactivating */\n    inactivating?: HookMatchCriterion;\n    /** A [[HookMatchCriterion]] to match any state that would be reactivating */\n    reactivating?: HookMatchCriterion;\n  }\n}\n\nconst isChildOf = (parent: PathNode) => (node: PathNode) => node.state.parent === parent.state;\n\nconst isChildOfAny = (_parents: PathNode[]) => {\n  return (node: PathNode) => _parents.map(parent => isChildOf(parent)(node)).reduce(anyTrueR, false);\n};\n\nconst ancestorPath = (state: StateObject) => (state.parent ? ancestorPath(state.parent).concat(state) : [state]);\n\nconst isDescendantOf = (_ancestor: PathNode) => {\n  const ancestor = _ancestor.state;\n  return (node: PathNode) => ancestorPath(node.state).indexOf(ancestor) !== -1;\n};\n\nconst isDescendantOfAny = (ancestors: PathNode[]) => (node: PathNode) =>\n  ancestors.map(ancestor => isDescendantOf(ancestor)(node)).reduce(anyTrueR, false);\n\n/**\n * Given a path, returns a function which takes a node.\n * Given a node, finds a node in the path which has the same state.\n */\nconst findInPath = (path: PathNode[]) => (node: PathNode) => path.find(pathNode => pathNode.state == node.state);\n\nconst notFoundInPath = (path: PathNode[]) => not(findInPath(path) as any);\n\n/** uirouter/core 5.x/6.x compatibility code */\nconst cloneNode = (node: PathNode) => {\n  const n = node as any;\n  return (isFunction(n.clone) && n.clone()) || (PathNode as any).clone(node);\n};\n\nconst applyParamsFromPath = (path: PathNode[], dest: PathNode) => {\n  const sourceNode = findInPath(path)(dest);\n  if (!sourceNode)\n    throw new Error(\n      `Could not find matching node for ${dest.state.name} in source path [${path\n        .map(node => node.state.name)\n        .join(', ')}]`\n    );\n  return extend(cloneNode(dest), { paramValues: sourceNode.paramValues });\n};\n\n/**\n * Sorts fn that sorts by:\n * 1) node depth (how deep a state is nested)\n * 2) the order in which the state was inactivated (later in wins)\n */\nfunction nodeDepthThenInactivateOrder(inactives: PathNode[]) {\n  return function(l: PathNode, r: PathNode): number {\n    const depthDelta = l.state.path.length - r.state.path.length;\n    return depthDelta !== 0 ? depthDelta : inactives.indexOf(r) - inactives.indexOf(l);\n  };\n}\n\n/**\n * The sticky-states plugin class\n *\n * router.plugin(StickyStatesPlugin);\n */\nexport class StickyStatesPlugin extends UIRouterPluginBase {\n  name = 'sticky-states';\n  private _inactives: PathNode[] = [];\n  private pluginAPI: TransitionServicePluginAPI;\n\n  constructor(public router: UIRouter) {\n    super();\n\n    this.pluginAPI = router.transitionService._pluginapi;\n\n    this._defineStickyPaths();\n    this._defineStickyEvents();\n    this._addCreateHook();\n    this._addStateCallbacks();\n    this._addDefaultTransitionOption();\n  }\n\n  inactives(): StateDeclaration[] {\n    return this._inactives.map(node => node.state.self);\n  }\n\n  private _addCreateHook() {\n    this.router.transitionService.onCreate(\n      {},\n      trans => {\n        trans['_treeChanges'] = this._calculateStickyTreeChanges(trans);\n      },\n      { priority: 100 }\n    );\n  }\n\n  private _defineStickyPaths() {\n    // let paths = this.pluginAPI._getPathTypes();\n    this.pluginAPI._definePathType('inactivating', TransitionHookScope.STATE);\n    this.pluginAPI._definePathType('reactivating', TransitionHookScope.STATE);\n  }\n\n  private _defineStickyEvents() {\n    const paths = this.pluginAPI._getPathTypes();\n    this.pluginAPI._defineEvent('onInactivate', TransitionHookPhase.RUN, 5, paths.inactivating, true);\n    this.pluginAPI._defineEvent('onReactivate', TransitionHookPhase.RUN, 35, paths.reactivating);\n  }\n\n  // Process state.onInactivate or state.onReactivate callbacks\n  private _addStateCallbacks() {\n    const inactivateCriteria = { inactivating: state => !!state.onInactivate };\n    this.router.transitionService.onInactivate(inactivateCriteria, (trans: Transition, state: StateDeclaration) =>\n      state.onInactivate(trans, state)\n    );\n\n    const reactivateCriteria = { reactivating: state => !!state.onReactivate };\n    this.router.transitionService.onReactivate(reactivateCriteria, (trans: Transition, state: StateDeclaration) =>\n      state.onReactivate(trans, state)\n    );\n  }\n\n  private _calculateExitSticky(tc: TreeChanges, trans: Transition) {\n    // Process the inactive states that are going to exit due to $stickyState.reset()\n    let exitSticky = trans.options().exitSticky || [];\n    if (!isArray(exitSticky)) exitSticky = [exitSticky];\n\n    const $state = trans.router.stateService;\n\n    const states: StateObject[] = (exitSticky as any[])\n      .map(assertMap(stateOrName => $state.get(stateOrName), state => 'State not found: ' + state))\n      .map(state => state.$$state());\n\n    const potentialExitingStickies = this._inactives.concat(tc.inactivating).reduce(uniqR, []) as PathNode[];\n\n    const findInactive = state => potentialExitingStickies.find(node => node.state === state);\n    const notInactiveMsg = state => 'State not inactive: ' + state;\n    const exitingInactives = states.map(assertMap(findInactive, notInactiveMsg));\n    const exiting = potentialExitingStickies.filter(isDescendantOfAny(exitingInactives));\n\n    const inToPathMsg = node => 'Can not exit a sticky state that is currently active/activating: ' + node.state.name;\n    exiting.map(assertMap(node => !inArray(tc.to, node), inToPathMsg));\n\n    return exiting;\n  }\n\n  private _calculateStickyTreeChanges(trans: Transition): TreeChanges {\n    const inactives = this._inactives;\n    const tc: TreeChanges = trans.treeChanges();\n    tc.inactivating = [];\n    tc.reactivating = [];\n\n    /****************\n     * Process states that are about to be inactivated\n     ****************/\n\n    if (tc.entering.length && tc.exiting[0] && tc.exiting[0].state.sticky) {\n      tc.inactivating = tc.exiting;\n      tc.exiting = [];\n    }\n\n    /****************\n     * Determine which states are about to be reactivated\n     ****************/\n\n    // Simulate a transition where the fromPath is a clone of the toPath, but use the inactivated nodes\n    // This will calculate which inactive nodes that need to be exited/entered due to param changes\n    const inactiveFromPath = tc.retained.concat(tc.entering.map(findInPath(inactives))).filter(identity);\n    const simulatedTC = PathUtils.treeChanges(inactiveFromPath, tc.to, trans.options().reloadState);\n\n    const shouldRewritePaths = ['retained', 'entering', 'exiting'].some(path => !!simulatedTC[path].length);\n\n    if (shouldRewritePaths) {\n      // The 'retained' nodes from the simulated transition's TreeChanges are the ones that will be reactivated.\n      // (excluding the nodes that are in the original retained path)\n      const reactivating = simulatedTC.retained.slice(tc.retained.length);\n\n      // Apply the toParams to the reactivating states (to get dynamic param changes)\n      tc.reactivating = reactivating.map(node => applyParamsFromPath(tc.to, node));\n\n      // Entering nodes are the same as the simulated transition's entering\n      tc.entering = simulatedTC.entering;\n\n      // The simulatedTC 'exiting' nodes are inactives that are being exited because:\n      // - The inactive state's params changed\n      // - The inactive state is being reloaded\n      // - The inactive state is a child of the to state\n      tc.exiting = tc.exiting.concat(simulatedTC.exiting);\n\n      // Rewrite the to path\n      const retainedWithToParams = tc.retained.map(node => applyParamsFromPath(tc.to, node));\n      tc.to = retainedWithToParams.concat(tc.reactivating).concat(tc.entering);\n    }\n\n    /****************\n     * Determine which additional inactive states should be exited\n     ****************/\n\n    // Any inactive state whose parent state is exactly activated will be exited\n    const childrenOfToState = inactives.filter(isChildOf(tail(tc.to)));\n\n    // Any inactive non-sticky state whose parent state is activated (and is itself not activated) will be exited\n    const childrenOfToPath = inactives\n      .filter(isChildOfAny(tc.to))\n      .filter(notFoundInPath(tc.to))\n      .filter(node => !node.state.sticky);\n\n    const exitingChildren = childrenOfToState.concat(childrenOfToPath).filter(notFoundInPath(tc.exiting));\n\n    const exitingRoots = tc.exiting.concat(exitingChildren);\n\n    // Any inactive descendant of an exiting state will be exited\n    const orphans = inactives\n      .filter(isDescendantOfAny(exitingRoots))\n      .filter(notFoundInPath(exitingRoots))\n      .concat(exitingChildren)\n      .reduce<PathNode[]>(uniqR, [])\n      .sort(nodeDepthThenInactivateOrder(inactives));\n\n    tc.exiting = orphans.concat(tc.exiting);\n\n    // commit all changes to inactives once transition is complete and successful\n    trans.onSuccess({}, () => {\n      tc.exiting.map(findInPath(inactives)).forEach(removeFrom(inactives));\n      tc.entering.map(findInPath(inactives)).forEach(removeFrom(inactives));\n      tc.reactivating.map(findInPath(inactives)).forEach(removeFrom(inactives));\n      tc.inactivating.forEach(pushTo(this._inactives));\n    });\n\n    // console.log('inactives will be:', inactives.map(x => x.state.name));\n\n    // let tcCopy: any = Object.assign({}, tc);\n    // Object.keys(tcCopy).forEach(key => tcCopy[key] = tcCopy[key].map(x => x.state.name));\n    // console.table(tcCopy);\n\n    // Process the inactive sticky states that should be exited\n    const exitSticky = this._calculateExitSticky(tc, trans);\n    exitSticky.filter(node => !findInPath(tc.exiting)(node)).forEach(pushTo(tc.exiting));\n\n    // Also process the active sticky states that are about to be inactivated, but should be exited\n    exitSticky.filter(findInPath(tc.inactivating)).forEach(removeFrom(tc.inactivating));\n\n    return tc;\n  }\n\n  private _addDefaultTransitionOption() {\n    defaultTransOpts.exitSticky = [];\n  }\n\n  /**\n   * Exits inactive sticky state(s)\n   *\n   * #### Example:\n   * ```js\n   * $stickyState.exitSticky('inactivestate');\n   * ```\n   *\n   * ```js\n   * $stickyState.exitSticky([ 'inactivestate1', 'inactivestate2' ]);\n   * ```\n   *\n   * ```js\n   * // exit all inactive stickies\n   * $stickyState.exitSticky();\n   * ```\n   *\n   * ```js\n   * // exit all inactive stickies\n   * $stickyState.exitSticky($stickyState.inactives());\n   * ```\n   * @param states The state name, or an array of state names\n   */\n  exitSticky();\n  exitSticky(states: StateOrName);\n  exitSticky(states: StateOrName[]);\n  exitSticky(states?: any) {\n    const $state = this.router.stateService;\n    if (states === undefined) states = this._inactives.map(node => node.state.name);\n    if (isString(states)) states = [states];\n\n    return $state.go(\n      $state.current,\n      {},\n      {\n        inherit: true,\n        exitSticky: states,\n      }\n    );\n  }\n}\n"],"names":["anyTrueR","not","isFunction","PathNode","extend","TransitionHookScope","TransitionHookPhase","isArray","assertMap","uniqR","inArray","identity","PathUtils","tail","removeFrom","pushTo","defaultTransOpts","isString","UIRouterPluginBase"],"mappings":"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"}