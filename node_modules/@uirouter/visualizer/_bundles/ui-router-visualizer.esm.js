var n,u,i,t,o,r,f={},e=[],c=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function s(n,l){for(var u in l)n[u]=l[u];return n}function a(n){var l=n.parentNode;l&&l.removeChild(n);}function v(n,l,u){var i,t,o,r=arguments,f={};for(o in l)"key"==o?i=l[o]:"ref"==o?t=l[o]:f[o]=l[o];if(arguments.length>3)for(u=[u],o=3;o<arguments.length;o++)u.push(r[o]);if(null!=u&&(f.children=u),"function"==typeof n&&null!=n.defaultProps)for(o in n.defaultProps)void 0===f[o]&&(f[o]=n.defaultProps[o]);return h(n,f,i,t,null)}function h(l,u,i,t,o){var r={type:l,props:u,key:i,ref:t,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:o};return null==o&&(r.__v=r),null!=n.vnode&&n.vnode(r),r}function p(n){return n.children}function d(n,l){this.props=n,this.context=l;}function _(n,l){if(null==l)return n.__?_(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return "function"==typeof n.type?_(n):null}function w(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return w(n)}}function k(l){(!l.__d&&(l.__d=!0)&&u.push(l)&&!m.__r++||t!==n.debounceRendering)&&((t=n.debounceRendering)||i)(m);}function m(){for(var n;m.__r=u.length;)n=u.sort(function(n,l){return n.__v.__b-l.__v.__b}),u=[],n.some(function(n){var l,u,i,t,o,r,f;n.__d&&(r=(o=(l=n).__v).__e,(f=l.__P)&&(u=[],(i=s({},o)).__v=i,t=T(f,o,i,l.__n,void 0!==f.ownerSVGElement,null,u,null==r?_(o):r),$(u,o),t!=r&&w(o)));});}function g(n,l,u,i,t,o,r,c,s,v){var y,d,w,k,m,g,b,A=i&&i.__k||e,P=A.length;for(s==f&&(s=null!=r?r[0]:P?_(i,0):null),u.__k=[],y=0;y<l.length;y++)if(null!=(k=u.__k[y]=null==(k=l[y])||"boolean"==typeof k?null:"string"==typeof k||"number"==typeof k?h(null,k,null,null,k):Array.isArray(k)?h(p,{children:k},null,null,null):null!=k.__e||null!=k.__c?h(k.type,k.props,k.key,null,k.__v):k)){if(k.__=u,k.__b=u.__b+1,null===(w=A[y])||w&&k.key==w.key&&k.type===w.type)A[y]=void 0;else for(d=0;d<P;d++){if((w=A[d])&&k.key==w.key&&k.type===w.type){A[d]=void 0;break}w=null;}m=T(n,k,w=w||f,t,o,r,c,s,v),(d=k.ref)&&w.ref!=d&&(b||(b=[]),w.ref&&b.push(w.ref,null,k),b.push(d,k.__c||m,k)),null!=m?(null==g&&(g=m),s=x(n,k,w,A,r,m,s),v||"option"!=u.type?"function"==typeof u.type&&(u.__d=s):n.value=""):s&&w.__e==s&&s.parentNode!=n&&(s=_(w));}if(u.__e=g,null!=r&&"function"!=typeof u.type)for(y=r.length;y--;)null!=r[y]&&a(r[y]);for(y=P;y--;)null!=A[y]&&I(A[y],A[y]);if(b)for(y=0;y<b.length;y++)H(b[y],b[++y],b[++y]);}function x(n,l,u,i,t,o,r){var f,e,c;if(void 0!==l.__d)f=l.__d,l.__d=void 0;else if(t==u||o!=r||null==o.parentNode)n:if(null==r||r.parentNode!==n)n.appendChild(o),f=null;else {for(e=r,c=0;(e=e.nextSibling)&&c<i.length;c+=2)if(e==o)break n;n.insertBefore(o,r),f=r;}return void 0!==f?f:o.nextSibling}function A(n,l,u,i,t){var o;for(o in u)"children"===o||"key"===o||o in l||C(n,o,null,u[o],i);for(o in l)t&&"function"!=typeof l[o]||"children"===o||"key"===o||"value"===o||"checked"===o||u[o]===l[o]||C(n,o,l[o],u[o],i);}function P(n,l,u){"-"===l[0]?n.setProperty(l,u):n[l]=null==u?"":"number"!=typeof u||c.test(l)?u:u+"px";}function C(n,l,u,i,t){var o,r;if(t&&"className"==l&&(l="class"),"style"===l)if("string"==typeof u)n.style=u;else {if("string"==typeof i&&(n.style=i=""),i)for(l in i)u&&l in u||P(n.style,l,"");if(u)for(l in u)i&&u[l]===i[l]||P(n.style,l,u[l]);}else "o"===l[0]&&"n"===l[1]?(o=l!==(l=l.replace(/Capture$/,"")),(r=l.toLowerCase())in n&&(l=r),l=l.slice(2),n.l||(n.l={}),n.l[l]=u,u?i||n.addEventListener(l,z,o):n.removeEventListener(l,z,o)):"list"!==l&&"tagName"!==l&&"form"!==l&&"type"!==l&&"size"!==l&&"download"!==l&&"href"!==l&&!t&&l in n?n[l]=null==u?"":u:"function"!=typeof u&&"dangerouslySetInnerHTML"!==l&&(l!==(l=l.replace(/xlink:?/,""))?null==u||!1===u?n.removeAttributeNS("http://www.w3.org/1999/xlink",l.toLowerCase()):n.setAttributeNS("http://www.w3.org/1999/xlink",l.toLowerCase(),u):null==u||!1===u&&!/^ar/.test(l)?n.removeAttribute(l):n.setAttribute(l,u));}function z(l){this.l[l.type](n.event?n.event(l):l);}function N(n,l,u){var i,t;for(i=0;i<n.__k.length;i++)(t=n.__k[i])&&(t.__=n,t.__e&&("function"==typeof t.type&&t.__k.length>1&&N(t,l,u),l=x(u,t,t,n.__k,null,t.__e,l),"function"==typeof n.type&&(n.__d=l)));}function T(l,u,i,t,o,r,f,e,c){var a,v,h,y,_,w,k,m,b,x,A,P=u.type;if(void 0!==u.constructor)return null;(a=n.__b)&&a(u);try{n:if("function"==typeof P){if(m=u.props,b=(a=P.contextType)&&t[a.__c],x=a?b?b.props.value:a.__:t,i.__c?k=(v=u.__c=i.__c).__=v.__E:("prototype"in P&&P.prototype.render?u.__c=v=new P(m,x):(u.__c=v=new d(m,x),v.constructor=P,v.render=L),b&&b.sub(v),v.props=m,v.state||(v.state={}),v.context=x,v.__n=t,h=v.__d=!0,v.__h=[]),null==v.__s&&(v.__s=v.state),null!=P.getDerivedStateFromProps&&(v.__s==v.state&&(v.__s=s({},v.__s)),s(v.__s,P.getDerivedStateFromProps(m,v.__s))),y=v.props,_=v.state,h)null==P.getDerivedStateFromProps&&null!=v.componentWillMount&&v.componentWillMount(),null!=v.componentDidMount&&v.__h.push(v.componentDidMount);else {if(null==P.getDerivedStateFromProps&&m!==y&&null!=v.componentWillReceiveProps&&v.componentWillReceiveProps(m,x),!v.__e&&null!=v.shouldComponentUpdate&&!1===v.shouldComponentUpdate(m,v.__s,x)||u.__v===i.__v){v.props=m,v.state=v.__s,u.__v!==i.__v&&(v.__d=!1),v.__v=u,u.__e=i.__e,u.__k=i.__k,v.__h.length&&f.push(v),N(u,e,l);break n}null!=v.componentWillUpdate&&v.componentWillUpdate(m,v.__s,x),null!=v.componentDidUpdate&&v.__h.push(function(){v.componentDidUpdate(y,_,w);});}v.context=x,v.props=m,v.state=v.__s,(a=n.__r)&&a(u),v.__d=!1,v.__v=u,v.__P=l,a=v.render(v.props,v.state,v.context),v.state=v.__s,null!=v.getChildContext&&(t=s(s({},t),v.getChildContext())),h||null==v.getSnapshotBeforeUpdate||(w=v.getSnapshotBeforeUpdate(y,_)),A=null!=a&&a.type==p&&null==a.key?a.props.children:a,g(l,Array.isArray(A)?A:[A],u,i,t,o,r,f,e,c),v.base=u.__e,v.__h.length&&f.push(v),k&&(v.__E=v.__=null),v.__e=!1;}else null==r&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=j(i.__e,u,i,t,o,r,f,c);(a=n.diffed)&&a(u);}catch(l){u.__v=null,n.__e(l,u,i);}return u.__e}function $(l,u){n.__c&&n.__c(u,l),l.some(function(u){try{l=u.__h,u.__h=[],l.some(function(n){n.call(u);});}catch(l){n.__e(l,u.__v);}});}function j(n,l,u,i,t,o,r,c){var s,a,v,h,y,p=u.props,d=l.props;if(t="svg"===l.type||t,null!=o)for(s=0;s<o.length;s++)if(null!=(a=o[s])&&((null===l.type?3===a.nodeType:a.localName===l.type)||n==a)){n=a,o[s]=null;break}if(null==n){if(null===l.type)return document.createTextNode(d);n=t?document.createElementNS("http://www.w3.org/2000/svg",l.type):document.createElement(l.type,d.is&&{is:d.is}),o=null,c=!1;}if(null===l.type)p!==d&&n.data!==d&&(n.data=d);else {if(null!=o&&(o=e.slice.call(n.childNodes)),v=(p=u.props||f).dangerouslySetInnerHTML,h=d.dangerouslySetInnerHTML,!c){if(null!=o)for(p={},y=0;y<n.attributes.length;y++)p[n.attributes[y].name]=n.attributes[y].value;(h||v)&&(h&&v&&h.__html==v.__html||(n.innerHTML=h&&h.__html||""));}A(n,d,p,t,c),h?l.__k=[]:(s=l.props.children,g(n,Array.isArray(s)?s:[s],l,u,i,"foreignObject"!==l.type&&t,o,r,f,c)),c||("value"in d&&void 0!==(s=d.value)&&s!==n.value&&C(n,"value",s,p.value,!1),"checked"in d&&void 0!==(s=d.checked)&&s!==n.checked&&C(n,"checked",s,p.checked,!1));}return n}function H(l,u,i){try{"function"==typeof l?l(u):l.current=u;}catch(l){n.__e(l,i);}}function I(l,u,i){var t,o,r;if(n.unmount&&n.unmount(l),(t=l.ref)&&(t.current&&t.current!==l.__e||H(t,null,u)),i||"function"==typeof l.type||(i=null!=(o=l.__e)),l.__e=l.__d=void 0,null!=(t=l.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(l){n.__e(l,u);}t.base=t.__P=null;}if(t=l.__k)for(r=0;r<t.length;r++)t[r]&&I(t[r],u,i);null!=o&&a(o);}function L(n,l,u){return this.constructor(n,u)}function M(l,u,i){var t,r,c;n.__&&n.__(l,u),r=(t=i===o)?null:i&&i.__k||u.__k,l=v(p,null,[l]),c=[],T(u,(t?u:i||u).__k=l,r||f,f,void 0!==u.ownerSVGElement,i&&!t?[i]:r?null:u.childNodes.length?e.slice.call(u.childNodes):null,c,i||f,t),$(c,l);}n={__e:function(n,l){for(var u,i;l=l.__;)if((u=l.__c)&&!u.__)try{if(u.constructor&&null!=u.constructor.getDerivedStateFromError&&(i=!0,u.setState(u.constructor.getDerivedStateFromError(n))),null!=u.componentDidCatch&&(i=!0,u.componentDidCatch(n)),i)return k(u.__E=u)}catch(l){n=l;}throw n}},d.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=s({},this.state),"function"==typeof n&&(n=n(s({},u),this.props)),n&&s(u,n),null!=n&&this.__v&&(l&&this.__h.push(l),k(this));},d.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),k(this));},d.prototype.render=p,u=[],i="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,m.__r=0,o=f,r=0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var StateSelector = /** @class */ (function (_super) {
    __extends(StateSelector, _super);
    function StateSelector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            current: null,
            states: [],
            deregisterFn: null,
        };
        _this.selectState = function (event) {
            var $state = _this.props.router.stateService;
            var to = event.target.value;
            if (to)
                $state.go(to);
        };
        return _this;
    }
    StateSelector.prototype.componentDidMount = function () {
        var _this = this;
        var router = this.props.router;
        var updateStates = function () { return _this.setState({ states: router.stateRegistry.get().map(function (state) { return state.name; }) }); };
        var updateCurrent = function (trans) { return _this.setState({ current: trans.to().name }); };
        if (router.stateRegistry.onStatesChanged) {
            this.deregisterStateListenerFn = router.stateRegistry.onStatesChanged(updateStates);
        }
        var deregisterFn = router.transitionService.onSuccess({}, updateCurrent);
        this.setState({ current: router.globals.current.name, states: [], deregisterFn: deregisterFn });
        updateStates();
    };
    StateSelector.prototype.componentWillUnmount = function () {
        if (this.state.deregisterFn) {
            this.state.deregisterFn();
        }
        if (this.deregisterStateListenerFn) {
            this.deregisterStateListenerFn();
        }
    };
    StateSelector.prototype.render = function () {
        return (v("select", { value: this.state.current || '', onChange: this.selectState, style: { maxWidth: 120 } },
            v("option", { value: "" }, "Choose a state"),
            this.state.states.map(function (state) { return (v("option", { key: state, value: state }, state)); })));
    };
    return StateSelector;
}(d));

var hasClass = function (classname) { return function (el) { return !!new RegExp("\\b" + classname + "\\b").exec(el.className); }; };
var addClass = function (classname) { return function (el) { return (el.className = el.className + ' ' + classname); }; };
var removeClass = function (classname) { return function (el) {
    return (el.className = el.className.replace(new RegExp("\\b" + classname + "\\b", 'g'), ''));
}; };
var toggleClass = function (classname) { return function (el) {
    if (hasClass(classname)(el))
        removeClass(classname)(el);
    else
        addClass(classname)(el);
}; };

var moveElement = function (elementToMove) {
    return function _moveElement(elementBeingDragged, event, details) {
        var initialClientX = details.initialClientX, initialClientY = details.initialClientY, lastClientX = details.lastClientX, lastClientY = details.lastClientY, newClientX = details.newClientX, newClientY = details.newClientY;
        var el = elementToMove;
        var bounds = el.getBoundingClientRect();
        var left = bounds.left, top = bounds.top;
        var dx = newClientX - lastClientX;
        var dy = newClientY - lastClientY;
        el.style.right = 'auto';
        el.style.bottom = 'auto';
        el.style.left = left + dx + 'px';
        el.style.top = top + dy + 'px';
    };
};
var dragActions = {
    move: moveElement,
};
function draggable(el, callback) {
    var isDragging = false;
    var initialClientX = 0, initialClientY = 0;
    var lastClientX = 0, lastClientY = 0;
    var mouseDownListener = function (e) {
        isDragging = true;
        lastClientX = initialClientX = e.clientX;
        lastClientY = initialClientY = e.clientY;
        var dragListener = function (e) {
            if ( !isDragging)
                return;
            e.preventDefault();
            var newClientX = e.clientX, newClientY = e.clientY;
            callback(el, e, { initialClientX: initialClientX, initialClientY: initialClientY, lastClientX: lastClientX, lastClientY: lastClientY, newClientX: newClientX, newClientY: newClientY });
            lastClientX = newClientX;
            lastClientY = newClientY;
        };
        var doneDragging = function (e) {
            isDragging = false;
            document.removeEventListener('mousemove', dragListener);
            document.removeEventListener('mouseup', doneDragging);
        };
        document.addEventListener('mousemove', dragListener);
        document.addEventListener('mouseup', doneDragging);
    };
    addClass('draggable')(el);
    el.addEventListener('mousedown', mouseDownListener);
    return function () { return el.removeEventListener('mousedown', mouseDownListener); };
}

var StateNode = /** @class */ (function (_super) {
    __extends(StateNode, _super);
    function StateNode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.goTimeout = null;
        _this.handleCollapseClicked = function () {
            clearTimeout(_this.goTimeout);
            _this.props.node._collapsed = !_this.props.node._collapsed;
            _this.props.doLayout();
        };
        _this.handleGoClicked = function () {
            clearTimeout(_this.goTimeout);
            var stateName = _this.props.node.name;
            stateName = stateName.replace(/\.\*\*$/, '');
            _this.goTimeout = setTimeout(function () { return _this.props.router.stateService.go(stateName); }, 200);
        };
        return _this;
    }
    StateNode.prototype.render = function () {
        var renderer = this.props.renderer;
        var _a = this.props, node = _a.node, x = _a.x, y = _a.y, nodeOptions = _a.nodeOptions;
        var baseRadius = renderer.baseRadius, baseFontSize = renderer.baseFontSize, baseNodeStrokeWidth = renderer.baseNodeStrokeWidth, zoom = renderer.zoom;
        var r = baseRadius * zoom;
        var fontSize = baseFontSize * zoom;
        var nodeStrokeWidth = baseNodeStrokeWidth * (node.entered ? 1.5 : 1) * zoom;
        var defaultClasses = ['entered', 'retained', 'exited', 'active', 'inactive', 'future', 'highlight', 'collapsed']
            .filter(function (clazz) { return node[clazz]; })
            .join(' ');
        var nodeClasses = nodeOptions && nodeOptions.classes ? nodeOptions.classes(node) : '';
        var circleClasses = defaultClasses + ' ' + nodeClasses;
        var descendents = node.collapsed ? node.totalDescendents : 0;
        return (v("g", { transform: "translate(" + x + ", " + y + ")", onClick: this.handleGoClicked, onDblClick: this.handleCollapseClicked },
            v("circle", { className: circleClasses, "stroke-width": nodeStrokeWidth, r: r }),
            !node.collapsed ? ('') : (v("text", { className: "label", "text-anchor": "middle", "font-size": fontSize * (descendents < 10 ? 1.0 : 0.8) },
                "(",
                descendents,
                ")")),
            renderer.labelRenderFn(x, y, node, nodeOptions, renderer),
            v("text", { className: "label", "text-anchor": "middle", "font-size": fontSize, transform: "translate(0, " + r * 2 + ")" }, node.label)));
    };
    return StateNode;
}(d));

/* ============================================================
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Open source under the BSD License.
 *
 * Copyright © 2008 George McGinley Smith
 * All rights reserved.
 * https://raw.github.com/danro/jquery-easing/master/LICENSE
 * ======================================================== */
// prettier-ignore
var easing = {
    // time, begin, change, duration
    easeInOutQuad: function (t, b, c, d) {
        if ((t /= d / 2) < 1)
            return c / 2 * t * t + b;
        return -c / 2 * ((--t) * (t - 2) - 1) + b;
    },
    easeInOutCubic: function (t, b, c, d) {
        if ((t /= d / 2) < 1)
            return c / 2 * t * t * t + b;
        return c / 2 * ((t -= 2) * t * t + 2) + b;
    },
    easeInOutQuart: function (t, b, c, d) {
        if ((t /= d / 2) < 1)
            return c / 2 * t * t * t * t + b;
        return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
    },
    easeInOutQuint: function (t, b, c, d) {
        if ((t /= d / 2) < 1)
            return c / 2 * t * t * t * t * t + b;
        return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
    },
    easeInOutSine: function (t, b, c, d) {
        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
    },
    easeInOutExpo: function (t, b, c, d) {
        if (t == 0)
            return b;
        if (t == d)
            return b + c;
        if ((t /= d / 2) < 1)
            return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
        return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
    },
    easeInOutCirc: function (t, b, c, d) {
        if ((t /= d / 2) < 1)
            return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
        return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
    },
    easeInElastic: function (t, b, c, d) {
        var s = 1.70158;
        var p = 0;
        var a = c;
        if (t == 0)
            return b;
        if ((t /= d) == 1)
            return b + c;
        if (!p)
            p = d * .3;
        if (a < Math.abs(c)) {
            a = c;
            var s = p / 4;
        }
        else
            var s = p / (2 * Math.PI) * Math.asin(c / a);
        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    },
    easeOutElastic: function (t, b, c, d) {
        var s = 1.70158;
        var p = 0;
        var a = c;
        if (t == 0)
            return b;
        if ((t /= d) == 1)
            return b + c;
        if (!p)
            p = d * .3;
        if (a < Math.abs(c)) {
            a = c;
            var s = p / 4;
        }
        else
            var s = p / (2 * Math.PI) * Math.asin(c / a);
        return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
    },
    easeInOutElastic: function (t, b, c, d) {
        var s = 1.70158;
        var p = 0;
        var a = c;
        if (t == 0)
            return b;
        if ((t /= d / 2) == 2)
            return b + c;
        if (!p)
            p = d * (.3 * 1.5);
        if (a < Math.abs(c)) {
            a = c;
            var s = p / 4;
        }
        else
            var s = p / (2 * Math.PI) * Math.asin(c / a);
        if (t < 1)
            return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
    },
    easeInOutBack: function (t, b, c, d, s) {
        if (s == undefined)
            s = 1.70158;
        if ((t /= d / 2) < 1)
            return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
        return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
    },
};

function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

define(Color, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor, this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex, // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
      : null) // invalid hex
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

define(Rgb, rgb, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return (-0.5 <= this.r && this.r < 255.5)
        && (-0.5 <= this.g && this.g < 255.5)
        && (-0.5 <= this.b && this.b < 255.5)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(")
      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
      + Math.max(0, Math.min(255, Math.round(this.b) || 0))
      + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(")
        + (this.h || 0) + ", "
        + (this.s || 0) * 100 + "%, "
        + (this.l || 0) * 100 + "%"
        + (a === 1 ? ")" : ", " + a + ")");
  }
}));

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}

function constant(x) {
  return function() {
    return x;
  };
}

function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant(isNaN(a) ? b : a);
}

var rgb$1 = (function rgbGamma(y) {
  var color = gamma(y);

  function rgb$1(start, end) {
    var r = color((start = rgb(start)).r, (end = rgb(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb$1.gamma = rgbGamma;

  return rgb$1;
})(1);

function numberArray(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function(t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}

function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

function interpolateArray(a, b) {
  return (isNumberArray(b) ? numberArray : genericArray)(a, b);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
}

function date(a, b) {
  var d = new Date;
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}

function number(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}

function object(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = value(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

function string(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: number(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
}

function value(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant(b)
      : (t === "number" ? number
      : t === "string" ? ((c = color(b)) ? (b = c, rgb$1) : string)
      : b instanceof color ? rgb$1
      : b instanceof Date ? date
      : isNumberArray(b) ? numberArray
      : Array.isArray(b) ? genericArray
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
      : number)(a, b);
}

// https://github.com/resin-io/triangular.js
/** This animation code was taken from trangular.js, and is used to interpolate 2 arrays of values using an easing fn */
function animatePath(newValue, oldValue, duration, updateFrame, finishFn, easeFn) {
    if (finishFn === void 0) { finishFn = function () { }; }
    if (easeFn === void 0) { easeFn = easing.easeOutElastic; }
    var start = null, interpolate = interpolateArray(oldValue, newValue);
    var step = function (now) {
        if (duration === -1)
            return finishFn();
        if (start == null)
            start = now;
        var progress = now - start, percent = 1;
        if (progress < duration) {
            requestAnimationFrame(step);
            percent = easeFn(progress, 0, 1, duration);
        }
        updateFrame(interpolate(percent));
    };
    requestAnimationFrame(step);
    return function cancel() {
        duration = -1;
    };
}

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;
  while (children = node.children) node = children[0];
  return node;
}

function leafRight(node) {
  var children;
  while (children = node.children) node = children[children.length - 1];
  return node;
}

function d3cluster() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0;

    // First walk, computing the initial x & y values.
    root.eachAfter(function(node) {
      var children = node.children;
      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });

    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2;

    // Second walk, normalizing x & y to the desired size.
    return root.eachAfter(nodeSize ? function(node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function(node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function(x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function(x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
  };

  cluster.nodeSize = function(x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
  };

  return cluster;
}

function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;
  else while (--i >= 0) sum += children[i].value;
  node.value = sum;
}

function node_count() {
  return this.eachAfter(count);
}

function node_each(callback, that) {
  let index = -1;
  for (const node of this) {
    callback.call(that, node, ++index, this);
  }
  return this;
}

function node_eachBefore(callback, that) {
  var node = this, nodes = [node], children, i, index = -1;
  while (node = nodes.pop()) {
    callback.call(that, node, ++index, this);
    if (children = node.children) {
      for (i = children.length - 1; i >= 0; --i) {
        nodes.push(children[i]);
      }
    }
  }
  return this;
}

function node_eachAfter(callback, that) {
  var node = this, nodes = [node], next = [], children, i, n, index = -1;
  while (node = nodes.pop()) {
    next.push(node);
    if (children = node.children) {
      for (i = 0, n = children.length; i < n; ++i) {
        nodes.push(children[i]);
      }
    }
  }
  while (node = next.pop()) {
    callback.call(that, node, ++index, this);
  }
  return this;
}

function node_find(callback, that) {
  let index = -1;
  for (const node of this) {
    if (callback.call(that, node, ++index, this)) {
      return node;
    }
  }
}

function node_sum(value) {
  return this.eachAfter(function(node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;
    while (--i >= 0) sum += children[i].value;
    node.value = sum;
  });
}

function node_sort(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}

function node_path(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];
  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }
  var k = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }
  return nodes;
}

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();
  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }
  return c;
}

function node_ancestors() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}

function node_descendants() {
  return Array.from(this);
}

function node_leaves() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}

function node_links() {
  var root = this, links = [];
  root.each(function(node) {
    if (node !== root) { // Don’t include the root’s parent, if any.
      links.push({source: node.parent, target: node});
    }
  });
  return links;
}

function* node_iterator() {
  var node = this, current, next = [node], children, i, n;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      yield node;
      if (children = node.children) {
        for (i = 0, n = children.length; i < n; ++i) {
          next.push(children[i]);
        }
      }
    }
  } while (next.length);
}

function hierarchy(data, children) {
  if (data instanceof Map) {
    data = [undefined, data];
    if (children === undefined) children = mapChildren;
  } else if (children === undefined) {
    children = objectChildren;
  }

  var root = new Node(data),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;

  while (node = nodes.pop()) {
    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
      node.children = childs;
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = childs[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function objectChildren(d) {
  return d.children;
}

function mapChildren(d) {
  return Array.isArray(d) ? d[1] : null;
}

function copyData(node) {
  if (node.data.value !== undefined) node.value = node.data.value;
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;
  do node.height = height;
  while ((node = node.parent) && (node.height < ++height));
}

function Node(data) {
  this.data = data;
  this.depth =
  this.height = 0;
  this.parent = null;
}

Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: node_count,
  each: node_each,
  eachAfter: node_eachAfter,
  eachBefore: node_eachBefore,
  find: node_find,
  sum: node_sum,
  sort: node_sort,
  path: node_path,
  ancestors: node_ancestors,
  descendants: node_descendants,
  leaves: node_leaves,
  links: node_links,
  copy: node_copy,
  [Symbol.iterator]: node_iterator
};

function defaultSeparation$1(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

// function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }

// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.
function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
}

// This function works analogously to nextLeft.
function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
}

// Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.
function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
}

// All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).
function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;
  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
}

// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.
function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor
  this.a = this; // ancestor
  this.z = 0; // prelim
  this.m = 0; // mod
  this.c = 0; // change
  this.s = 0; // shift
  this.t = null; // thread
  this.i = i; // number
}

TreeNode.prototype = Object.create(Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
}

// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
function d3tree() {
  var separation = defaultSeparation$1,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root);

    // Compute the layout using Buchheim et al.’s algorithm.
    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk);

    // If a fixed node size is specified, scale x and y.
    if (nodeSize) root.eachBefore(sizeNode);

    // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
      var left = root,
          right = root,
          bottom = root;
      root.eachBefore(function(node) {
        if (node.x < left.x) left = node;
        if (node.x > right.x) right = node;
        if (node.depth > bottom.depth) bottom = node;
      });
      var s = left === right ? 1 : separation(left, right) / 2,
          tx = s - left.x,
          kx = dx / (right.x + s + tx),
          ky = dy / (bottom.depth || 1);
      root.eachBefore(function(node) {
        node.x = (node.x + tx) * kx;
        node.y = node.depth * ky;
      });
    }

    return root;
  }

  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.
  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;
    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }
    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  }

  // Computes all real x-coordinates by summing up the modifiers recursively.
  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  }

  // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).
  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }
        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }
      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }
      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }
    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function(x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function(x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
  };

  tree.nodeSize = function(x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
  };

  return tree;
}

var RENDERER_PRESETS = {
    Tree: {
        layoutFn: TREE_LAYOUT,
        sortNodesFn: TOP_TO_BOTTOM_SORT,
        labelRenderFn: SLANTED_TEXT,
        edgeRenderFn: TREE_EDGE,
    },
    Cluster: {
        layoutFn: CLUSTER_LAYOUT,
        sortNodesFn: TOP_TO_BOTTOM_SORT,
        labelRenderFn: SLANTED_TEXT,
        edgeRenderFn: TREE_EDGE,
    },
    Radial: {
        layoutFn: RADIAL_LAYOUT,
        sortNodesFn: BOTTOM_TO_TOP_SORT,
        labelRenderFn: RADIAL_TEXT,
        edgeRenderFn: RADIAL_EDGE,
    },
};
var tree = RENDERER_PRESETS.Tree;
var DEFAULT_RENDERER = {
    baseRadius: 10,
    baseFontSize: 12,
    baseStrokeWidth: 2,
    baseNodeStrokeWidth: 2,
    zoom: 1.0,
    layoutFn: tree.layoutFn,
    sortNodesFn: tree.sortNodesFn,
    labelRenderFn: tree.labelRenderFn,
    edgeRenderFn: tree.edgeRenderFn,
};
///////////////////////////////////////////
// NODE RENDER ORDER
///////////////////////////////////////////
function BOTTOM_TO_TOP_SORT(a, b) {
    var b2t = b.layoutY - a.layoutY; // bottom to top
    if (b2t !== 0)
        return b2t;
    var l2r = a.layoutX - b.layoutX; // left to right
    return l2r;
}
function TOP_TO_BOTTOM_SORT(a, b) {
    var t2b = a.layoutY - b.layoutY; // top to bottom
    if (t2b !== 0)
        return t2b;
    var l2r = a.layoutX - b.layoutX; // left to right
    return l2r;
}
///////////////////////////////////////////
// LAYOUTS
///////////////////////////////////////////
function TREE_LAYOUT(rootNode) {
    var root = hierarchy(rootNode);
    var tree = d3tree();
    return updateNodes(tree(root));
}
function CLUSTER_LAYOUT(rootNode) {
    var root = hierarchy(rootNode);
    var tree = d3cluster();
    return updateNodes(tree(root));
}
/** For RADIAL_LAYOUT: projects x/y coords from a cluster layout to circular layout */
function project(x, y) {
    var angle = ((x - 90) / 180) * Math.PI, radius = y;
    var CENTER = 0.5;
    return { x: CENTER + radius * Math.cos(angle), y: CENTER + radius * Math.sin(angle) };
}
function RADIAL_LAYOUT(rootNode) {
    var root = hierarchy(rootNode);
    var layout = d3cluster()
        .size([360, 0.4])
        .separation(function (a, b) {
        return (a.parent == b.parent ? 1 : 2) / a.depth;
    });
    var nodes = layout(root);
    nodes.each(function (node) {
        var projected = project(node.x, node.y);
        var visNode = node.data;
        visNode.layoutX = node.x;
        visNode.layoutY = node.y;
        visNode.x = projected.x;
        visNode.y = projected.y;
    });
}
/** Mutates each StateVisNode by copying the new x/y values from the d3 HierarchyPointNode structure */
function updateNodes(nodes) {
    nodes.each(function (node) {
        node.data.layoutX = node.data.x = node.x;
        node.data.layoutY = node.data.y = node.y;
    });
    return nodes;
}
///////////////////////////////////////////
// STATE NAME LABEL
///////////////////////////////////////////
function RADIAL_TEXT(x, y, node, nodeOptions, renderer) {
    var baseFontSize = renderer.baseFontSize, zoom = renderer.zoom;
    var fontSize = baseFontSize * zoom;
    var label = (nodeOptions === null || nodeOptions === void 0 ? void 0 : nodeOptions.label) ? nodeOptions.label(node, defaultLabel(node)) : defaultLabel(node);
    var angle = node.layoutX || 0;
    var textAnchor = angle < 180 === !!node.children ? 'start' : 'end';
    var rotation = angle < 180 ? angle - 90 : angle + 90;
    var translation = (textAnchor === 'start' ? 15 : -15) * zoom;
    var transform = "rotate(" + rotation + "),translate(" + translation + ", 0)";
    return (v("text", { className: "name", "text-anchor": textAnchor, transform: transform, "font-size": fontSize },
        ' ',
        label,
        ' '));
}
function defaultLabel(node) {
    var segments = node.name.split('.');
    var name = segments.pop();
    if (name == '**')
        name = segments.pop() + '.**';
    return name;
}
function SLANTED_TEXT(x, y, node, nodeOptions, renderer) {
    var baseFontSize = renderer.baseFontSize, zoom = renderer.zoom;
    var fontSize = baseFontSize * zoom;
    var label = (nodeOptions === null || nodeOptions === void 0 ? void 0 : nodeOptions.label) ? nodeOptions.label(node, defaultLabel(node)) : defaultLabel(node);
    var transform = "rotate(-15),translate(0, " + -15 * zoom + ")";
    return (v("text", { className: "name", "text-anchor": "middle", transform: transform, "font-size": fontSize },
        ' ',
        label,
        ' '));
}
///////////////////////////////////////////
// GRAPH EDGES
///////////////////////////////////////////
/** Straight line */
function RADIAL_EDGE(node, renderer) {
    var strokeWidth = renderer.baseStrokeWidth * renderer.zoom;
    var makeLinkPath = function (node) {
        var s = { x: node.animX, y: node.animY }; // statevisnode
        var p = { x: node._parent.animX, y: node._parent.animY }; // parent
        return ('M' +
            [s.x, s.y] +
            // + "C"  + [s.x, (s.y + p.y) / 2.5]
            // + " "  + [p.x, (s.y + p.y) / 2.5]
            ' ' +
            [p.x, p.y]);
    };
    return v("path", { d: makeLinkPath(node), "stroke-width": strokeWidth, className: "link" });
}
/** Bezier curve */
function TREE_EDGE(node, renderer) {
    var strokeWidth = renderer.baseStrokeWidth * renderer.zoom;
    var makeLinkPath = function (node) {
        var s = { x: node.animX, y: node.animY }; // statevisnode
        var p = { x: node._parent.animX, y: node._parent.animY }; // parent
        var yAvg = (s.y + p.y) / 2;
        return "M " + s.x + " " + s.y + " C " + s.x + " " + yAvg + ", " + p.x + " " + yAvg + ", " + p.x + " " + p.y;
    };
    return v("path", { d: makeLinkPath(node), "stroke-width": strokeWidth, className: "link" });
}

function createStateVisNode(state) {
    var node = Object.create(state);
    Object.defineProperty(node, 'visible', {
        get: function () {
            if (this.entered)
                return true;
            var ancestorCollapsed = this._parent && (this._parent.collapsed || !this._parent.visible);
            return !ancestorCollapsed;
        },
    });
    Object.defineProperty(node, 'children', {
        get: function () {
            return this._children.filter(function (child) { return child.visible; });
        },
    });
    Object.defineProperty(node, 'totalDescendents', {
        get: function () {
            return this._children.reduce(function (acc, child) { return acc + child.totalDescendents; }, this._children.length);
        },
    });
    Object.defineProperty(node, 'collapsed', {
        get: function () {
            return !this.entered && this._collapsed && this._children.length;
        },
    });
    return node;
}

var resetMetadata = {
    label: '',
    highlight: false,
    active: false,
    future: false,
    retained: false,
    entered: false,
    exited: false,
    inactive: true,
};
var StateTree = /** @class */ (function (_super) {
    __extends(StateTree, _super);
    function StateTree() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            nodes: [],
            layout: {},
        };
        _this.nodes = [];
        _this.unmounted = false;
        _this.cancelCurrentAnimation = function () { return null; };
        _this.doLayoutAnimation = function () {
            _this.cancelCurrentAnimation();
            var nodes = _this.getNodes();
            if (!nodes.length)
                return;
            var rootNode = nodes.filter(function (state) { return state.name === ''; })[0];
            _this.props.renderer.layoutFn(rootNode);
            // Move all non-visible nodes to same x/y coords as the nearest visible parent
            nodes
                .filter(function (node) { return !node.visible; })
                .forEach(function (node) {
                var visibleAncestor = node._parent;
                while (visibleAncestor && !visibleAncestor.visible)
                    visibleAncestor = visibleAncestor._parent;
                if (visibleAncestor) {
                    node.x = visibleAncestor.x;
                    node.y = visibleAncestor.y;
                }
            });
            var dimensions = _this.dimensions();
            // Transforms x coord from the tree layout to fit the viewport using scale/offset values
            var transformX = function (xval) { return xval * dimensions.scaleX + dimensions.offsetX; };
            // Transforms y coord from the tree layout to fit the viewport using scale/offset values
            var transformY = function (yval) { return yval * dimensions.scaleY + dimensions.offsetY; };
            var getCurrentCoords = function (node) { return ({
                x: node.animX || _this.props.width / 2,
                y: node.animY || _this.props.height / 2,
            }); };
            // An array containing current x/y coords for all nodes
            // [ x1, y1, x2, y2, x3, y3, x4, y4 ]
            var currentCoords = nodes
                .map(getCurrentCoords)
                .map(function (obj) { return [obj.x, obj.y]; })
                .reduce(function (acc, arr) { return acc.concat(arr); }, []);
            // An array containing target x/y coords for all nodes
            // [ x1', y1', x2', y2', x3', y3', x4', y4' ]
            var targetCoords = nodes
                .map(function (node) { return [transformX(node.x), transformY(node.y)]; })
                .reduce(function (acc, arr) { return acc.concat(arr); }, []);
            // xyValArray is an array containing x/y coords for all nodes,
            // interpolated between currentCoords and targetCoords based on time
            // [ x1'', y1'', x2'', y2'', x3'', y3'', x4'', y4'' ]
            var animationFrame = function (xyValArray) {
                var tupleCount = xyValArray.length / 2;
                for (var i = 0; i < tupleCount && i < nodes.length; i++) {
                    var node = nodes[i];
                    node.animX = xyValArray[i * 2];
                    node.animY = xyValArray[i * 2 + 1];
                }
                _this.setState({ nodes: nodes });
            };
            _this.cancelCurrentAnimation = animatePath(targetCoords, currentCoords, 500, animationFrame, function () { return null; }, easing.easeInOutExpo);
        };
        _this.nodeForState = function (nodes, state) { return nodes.filter(function (node) { return node.name === state.name; })[0]; };
        _this.updateStates = function () {
            var router = _this.props.router;
            var states = router.stateService.get().map(function (s) { return s.$$state(); });
            var known = _this.nodes.map(Object.getPrototypeOf);
            var toAdd = states.filter(function (s) { return known.indexOf(s) === -1; });
            var toDel = known.filter(function (s) { return states.indexOf(s) === -1; });
            var nodes = (_this.nodes = _this.nodes.slice());
            if (toAdd.length || toDel.length) {
                toAdd.map(function (s) { return createStateVisNode(s); }).forEach(function (n) { return nodes.push(n); });
                toDel
                    .map(function (del) { return nodes.filter(function (node) { return del.isPrototypeOf(node); }); })
                    .reduce(function (acc, x) { return acc.concat(x); }, [])
                    .forEach(function (node) { return nodes.splice(nodes.indexOf(node), 1); });
                // Rebuild each node's children array
                nodes.forEach(function (n) { return (n._children = []); });
                nodes.forEach(function (n) {
                    if (!n || !n.parent)
                        return;
                    var parentNode = _this.nodeForState(nodes, n.parent);
                    if (!parentNode)
                        return;
                    parentNode._children.push(n);
                    n._parent = parentNode;
                });
                nodes.forEach(function (n) { return (n.future = !!n.lazyLoad); });
            }
            if (!_this.unmounted && !_this.deregisterStateListenerFn) {
                // poll if ui-router version is 1.0.0-beta.1 or earlier
                setTimeout(_this.updateStates, 1000);
            }
            _this.setState({ nodes: nodes }, _this.doLayoutAnimation);
        };
        _this.updateNodes = function ($transition$) {
            var nodes = _this.nodes.map(function (node) { return Object.assign(node, resetMetadata); });
            nodes.forEach(function (n) { return (n.future = !!n.lazyLoad); });
            if ($transition$) {
                var tc = $transition$.treeChanges();
                var getNode = function (node) { return _this.nodeForState(_this.nodes, node.state); };
                tc.retained
                    .concat(tc.entering)
                    .map(getNode)
                    .filter(function (x) { return x; })
                    .forEach(function (n) { return (n.entered = true); });
                tc.retained
                    .map(getNode)
                    .filter(function (x) { return x; })
                    .forEach(function (n) { return (n.retained = true); });
                tc.exiting
                    .map(getNode)
                    .filter(function (x) { return x; })
                    .forEach(function (n) { return (n.exited = true); });
                tc.to
                    .slice(-1)
                    .map(getNode)
                    .filter(function (x) { return x; })
                    .forEach(function (n) {
                    n.active = true;
                    n.label = 'active';
                });
            }
            _this.setState({ nodes: _this.nodes }, _this.doLayoutAnimation);
        };
        return _this;
    }
    StateTree.create = function (router, element, props) {
        if (props === void 0) { props = {}; }
        if (!element) {
            element = document.createElement('div');
            element.id = 'uirStateTree';
        }
        var initialProps = __assign(__assign({}, props), { router: router });
        var _render = function () {
            document.body.appendChild(element);
            M(v(StateTree, initialProps), element);
        };
        if (document.readyState === 'interactive' || document.readyState === 'complete') {
            _render();
        }
        else {
            document.addEventListener('DOMContentLoaded', _render, false);
        }
        return element;
    };
    StateTree.prototype.componentDidMount = function () {
        var _this = this;
        var registry = this.props.router.stateRegistry;
        var $transitions = this.props.router.transitionService;
        // Register states changed listener
        if (registry.onStatesChanged) {
            this.deregisterStateListenerFn = registry.onStatesChanged(function () { return _this.updateStates(); });
        }
        this.updateStates();
        // Register onSuccess transition hook to toggle the SVG classes
        this.deregisterHookFn = $transitions.onSuccess({}, function (trans) { return _this.updateNodes(trans); });
        this.updateNodes();
        var lastSuccessful = this.props.router.globals.successfulTransitions.peekTail();
        if (lastSuccessful) {
            this.updateNodes(lastSuccessful);
        }
        var pending = this.props.router.globals.transition;
        if (pending) {
            pending.promise.then(function () { return _this.updateNodes(pending); });
        }
    };
    StateTree.prototype.componentWillReceiveProps = function () {
        var nodes = this.state.nodes;
        this.setState({ nodes: nodes }, this.updateStates);
    };
    StateTree.prototype.dimensions = function () {
        var radius = 15;
        var offsetX = 0;
        var offsetY = radius * 2;
        var height = this.props.height || 500;
        var width = this.props.width || 500;
        var scaleX =  width - offsetX * 2;
        var scaleY =  height - offsetY * 2;
        return { radius: radius, offsetX: offsetX, offsetY: offsetY, scaleX: scaleX, scaleY: scaleY };
    };
    StateTree.prototype.componentWillUnmount = function () {
        this.unmounted = true;
        this.deregisterHookFn && this.deregisterHookFn();
    };
    StateTree.prototype.getNodes = function () {
        return this.nodes.slice().sort(this.props.renderer.sortNodesFn);
    };
    StateTree.prototype.render = function () {
        var _this = this;
        var renderer = this.props.renderer;
        var renderNodes = this.getNodes().filter(function (node) { return node.visible && node.animX && node.animY; });
        return (v("div", { className: "statevis" },
            v("svg", { width: this.props.width, height: this.props.height },
                renderNodes.filter(function (node) { return !!node.parent; }).map(function (node) { return renderer.edgeRenderFn(node, renderer); }),
                renderNodes.map(function (node) { return (v(StateNode, { key: node.name, node: node, router: _this.props.router, nodeOptions: _this.props.nodeOptions, renderer: _this.props.renderer, doLayout: _this.doLayoutAnimation.bind(_this), x: node.animX, y: node.animY })); }))));
    };
    StateTree.defaultProps = {
        height: 350,
        width: 250,
        renderer: DEFAULT_RENDERER,
    };
    return StateTree;
}(d));

var LayoutPrefs = /** @class */ (function (_super) {
    __extends(LayoutPrefs, _super);
    function LayoutPrefs() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            renderer: DEFAULT_RENDERER,
            presetName: 'Tree',
        };
        return _this;
    }
    LayoutPrefs.prototype.componentDidMount = function () {
        this.props.onRendererChange(this.state.renderer);
    };
    LayoutPrefs.prototype.handleZoom = function (event) {
        var el = event.target;
        var value = parseFloat(el['value']);
        var renderer = __assign(__assign({}, this.state.renderer), { zoom: value });
        this.setState({ renderer: renderer });
        this.props.onRendererChange(renderer);
    };
    LayoutPrefs.prototype.handleLayout = function (event) {
        var presetName = event.target['value'];
        var settings = RENDERER_PRESETS[presetName];
        var renderer = __assign(__assign({}, this.state.renderer), settings);
        this.setState({ renderer: renderer, presetName: presetName });
        this.props.onRendererChange(renderer);
    };
    LayoutPrefs.prototype.render = function () {
        return (v("div", { className: "uirStateVisLayoutPrefs", style: { display: 'flex', flexFlow: 'column nowrap' }, onMouseDown: function (evt) { return evt.stopPropagation(); } },
            v("div", { style: { flex: '1 1 auto', display: 'flex', flexFlow: 'row nowrap', alignItems: 'center' } },
                v("div", null, "Layout:"),
                v("select", { style: { marginLeft: 'auto', maxWidth: '100px' }, onChange: this.handleLayout.bind(this), value: this.state.presetName }, Object.keys(RENDERER_PRESETS).map(function (preset) { return v("option", { value: preset }, preset); }))),
            v("div", { style: { flex: '1 1 auto', display: 'flex', flexFlow: 'row nowrap', alignItems: 'center' } },
                v("span", null, "Node size:"),
                v("input", { style: { marginLeft: 'auto' }, value: '' + this.state.renderer.zoom, type: "range", min: "0.3", max: "3.0", step: "0.1", onInput: this.handleZoom.bind(this) }),
                v("span", null,
                    this.state.renderer.zoom,
                    "x"))));
    };
    return LayoutPrefs;
}(d));

var ChevronDown = function (_a) {
    var size = _a.size;
    return (v("svg", { width: size, height: size, viewBox: "0 0 1792 1792", xmlns: "http://www.w3.org/2000/svg" },
        v("path", { d: "M1683 808l-742 741q-19 19-45 19t-45-19l-742-741q-19-19-19-45.5t19-45.5l166-165q19-19 45-19t45 19l531 531 531-531q19-19 45-19t45 19l166 165q19 19 19 45.5t-19 45.5z" })));
};

var Close = function (_a) {
    var size = _a.size;
    return (v("svg", { width: size, height: size, viewBox: "0 0 1792 1792", xmlns: "http://www.w3.org/2000/svg" },
        v("path", { d: "M1490 1322q0 40-28 68l-136 136q-28 28-68 28t-68-28l-294-294-294 294q-28 28-68 28t-68-28l-136-136q-28-28-28-68t28-68l294-294-294-294q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 294 294-294q28-28 68-28t68 28l136 136q28 28 28 68t-28 68l-294 294 294 294q28 28 28 68z" })));
};

var Gear = function (_a) {
    var size = _a.size;
    return (v("svg", { width: size, height: size, viewBox: "0 0 1792 1792", xmlns: "http://www.w3.org/2000/svg" },
        v("path", { d: "M1152 896q0-106-75-181t-181-75-181 75-75 181 75 181 181 75 181-75 75-181zm512-109v222q0 12-8 23t-20 13l-185 28q-19 54-39 91 35 50 107 138 10 12 10 25t-9 23q-27 37-99 108t-94 71q-12 0-26-9l-138-108q-44 23-91 38-16 136-29 186-7 28-36 28h-222q-14 0-24.5-8.5t-11.5-21.5l-28-184q-49-16-90-37l-141 107q-10 9-25 9-14 0-25-11-126-114-165-168-7-10-7-23 0-12 8-23 15-21 51-66.5t54-70.5q-27-50-41-99l-183-27q-13-2-21-12.5t-8-23.5v-222q0-12 8-23t19-13l186-28q14-46 39-92-40-57-107-138-10-12-10-24 0-10 9-23 26-36 98.5-107.5t94.5-71.5q13 0 26 10l138 107q44-23 91-38 16-136 29-186 7-28 36-28h222q14 0 24.5 8.5t11.5 21.5l28 184q49 16 90 37l142-107q9-9 24-9 13 0 25 10 129 119 165 170 7 8 7 22 0 12-8 23-15 21-51 66.5t-54 70.5q26 50 41 98l183 28q13 2 21 12.5t8 23.5z" })));
};

var Help = function (_a) {
    var size = _a.size;
    return (v("svg", { width: size, height: size, viewBox: "0 0 1792 1792", xmlns: "http://www.w3.org/2000/svg" },
        v("path", { d: "M1008 1200v160q0 14-9 23t-23 9h-160q-14 0-23-9t-9-23v-160q0-14 9-23t23-9h160q14 0 23 9t9 23zm256-496q0 50-15 90t-45.5 69-52 44-59.5 36q-32 18-46.5 28t-26 24-11.5 29v32q0 14-9 23t-23 9h-160q-14 0-23-9t-9-23v-68q0-35 10.5-64.5t24-47.5 39-35.5 41-25.5 44.5-21q53-25 75-43t22-49q0-42-43.5-71.5t-95.5-29.5q-56 0-95 27-29 20-80 83-9 12-25 12-11 0-19-6l-108-82q-10-7-12-20t5-23q122-192 349-192 129 0 238.5 89.5t109.5 214.5zm-368-448q-130 0-248.5 51t-204 136.5-136.5 204-51 248.5 51 248.5 136.5 204 204 136.5 248.5 51 248.5-51 204-136.5 136.5-204 51-248.5-51-248.5-136.5-204-204-136.5-248.5-51zm768 640q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z" })));
};

var Controls = /** @class */ (function (_super) {
    __extends(Controls, _super);
    function Controls() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            showRendererPrefs: false,
        };
        return _this;
    }
    Controls.prototype.render = function () {
        return (v("div", { style: { width: '100%' } },
            v("div", { className: "uirStateVisControls" },
                v(StateSelector, { router: this.props.router }),
                v("div", { style: { marginLeft: 'auto', cursor: 'pointer' }, className: "uirStateVisIcons" },
                    v("span", { className: "uirStateVisHover" },
                        v(Help, { size: "16px" }),
                        v("div", { className: "hoverBlock" },
                            v("ul", null,
                                v("li", null, "Click a node to activate that state."),
                                v("li", null, "Select a state from the dropdown to activate that state."),
                                v("li", null, "Double click a node to auto-collapse that section of the tree when inactive. Collapsed nodes are displayed with a dotted outline and the count of collapsed children."),
                                v("li", null, "Lazy loaded states (including future states) are displayed with a dashed outline.")))),
                    v("span", { className: "uirStateVisHover" },
                        v(Gear, { size: "16px" }),
                        v("div", { className: "hoverBlock" },
                            v(LayoutPrefs, { onRendererChange: this.props.onRendererChange }))),
                    v("span", { className: "uirStateVisHover", onClick: this.props.onMinimize },
                        v(ChevronDown, { size: "16px" }),
                        v("div", null,
                            v("span", { style: { float: 'right' } }, "Minimize")),
                        v("div", null, "Minimize")),
                    v("span", { className: "uirStateVisHover", onClick: this.props.onClose },
                        v(Close, { size: "16px" }),
                        v("div", null,
                            v("span", { style: { float: 'right' } }, "Close")))))));
    };
    return Controls;
}(d));

/** A floating window that supports minimization and resizing  */
var StateVisWindow = /** @class */ (function (_super) {
    __extends(StateVisWindow, _super);
    function StateVisWindow(props) {
        var _this = _super.call(this, props) || this;
        _this.deregisterFns = [];
        _this.minimize = function () {
            // evt && evt.preventDefault();
            // evt && evt.stopPropagation();
            var el = _this.el;
            var bounds = el.getBoundingClientRect();
            _this.top = bounds.top + 'px';
            _this.left = bounds.left + 'px';
            _this.right = window.innerWidth - bounds.right + 'px';
            _this.bottom = window.innerHeight - bounds.bottom + 'px';
            el.style.top = 'auto';
            el.style.left = 'auto';
            el.style.right = _this.right;
            el.style.bottom = _this.bottom;
            var unminimize = function () {
                el.style.top = 'auto';
                el.style.left = 'auto';
                el.style.right = _this.right;
                el.style.bottom = _this.bottom;
                toggleClass('minimized')(el);
                el.removeEventListener('click', unminimize);
                var animationEndListener = function (evt) {
                    var bounds = el.getBoundingClientRect();
                    el.style.top = bounds.top + 'px';
                    el.style.left = bounds.left + 'px';
                    el.style.right = 'auto';
                    el.style.bottom = 'auto';
                    el.removeEventListener('transitionend', animationEndListener);
                };
                el.addEventListener('transitionend', animationEndListener);
            };
            addClass('minimized')(el);
            // wait 50ms to avoid coordinates jumping directly to 0/0 and avoid animation
            setTimeout(function () { return (el.style.right = el.style.bottom = '0'); }, 50);
            return unminimize;
        };
        _this.state = {
            unminimize: null,
        };
        return _this;
    }
    StateVisWindow.prototype.componentWillReceiveProps = function (nextProps) {
        if (this.props.minimized !== nextProps.minimized) {
            var unminimize_1 = this.state.unminimize;
            if (unminimize_1) {
                this.setState({ unminimize: null }, function () { return unminimize_1(); });
            }
            else {
                this.setState({ unminimize: this.minimize() });
            }
        }
    };
    StateVisWindow.prototype.componentWillUnmount = function () {
        this.deregisterFns.forEach(function (fn) { return fn(); });
    };
    StateVisWindow.prototype.componentDidMount = function () {
        if (typeof MutationObserver === 'function') {
            this.monitorResizeEvents();
        }
    };
    /** The uirStateVisContainer class enables resize: both. This function listens for resize events */
    StateVisWindow.prototype.monitorResizeEvents = function () {
        var _this = this;
        var _width = this.el.style.width;
        var _height = this.el.style.height;
        var observer = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
                if (mutation.attributeName == 'style') {
                    var el = mutation.target, newwidth = el['style'].width, newheight = el['style'].height;
                    if (newwidth !== _width || newheight !== _height) {
                        _width = newwidth;
                        _height = newheight;
                        var width = parseInt(newwidth.replace(/px$/, ''));
                        var height = parseInt(newheight.replace(/px$/, ''));
                        _this.props.onResize({ width: width, height: height });
                    }
                }
            });
        });
        var config = {
            attributes: true,
            childList: false,
            characterData: false,
            subtree: false,
            attributeFilter: ['style'],
        };
        observer.observe(this.el, config);
        this.deregisterFns.push(function () { return observer.disconnect(); });
    };
    StateVisWindow.prototype.render = function () {
        var _this = this;
        return (v("div", { className: "uirStateVisContainer", ref: function (el) { return (_this.el = el); } }, this.props.children));
    };
    return StateVisWindow;
}(d));

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = "/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\n#uirStateVisualizer {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 16px;\n  font-family: sans-serif;\n  font-weight: normal;\n  vertical-align: baseline;\n  line-height: 1;\n  display: block;\n  box-sizing: content-box;\n}\n#uirStateVisualizer svg {\n  box-sizing: content-box;\n}\n\n.uirStateVisContainer {\n  z-index: 999;\n  position: fixed;\n  right: 32px;\n  bottom: 64px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  transform: scale(1);\n  transform-origin: right bottom;\n  transition: right 0.5s ease, bottom 0.5s ease, transform 0.5s ease;\n  overflow: hidden;\n  resize: both;\n}\n\n.uirStateVisContainer.minimized {\n  cursor: pointer;\n  transform: scale(0.25);\n  z-index: 1000;\n}\n\n.uirStateVisContainer:hover {\n  outline: 2px solid rgba(0, 0, 0, 0.35);\n}\n\n.uirStateVisContainer:hover .uirStateVisControls {\n  visibility: visible;\n}\n\n.uirStateVisContainer .uirStateVisControls {\n  visibility: hidden;\n  display: flex;\n  width: 100%;\n  flex-flow: row nowrap;\n  justify-content: space-between;\n  flex: 1 0 auto;\n  z-index: 1;\n}\n\n.uirStateVisContainer .uirStateVisControls .uirStateVisIcons span svg {\n  padding: 3px;\n  fill: #777777;\n}\n\n.uirStateVisContainer .uirStateVisControls .uirStateVisIcons span:hover svg {\n  fill: black;\n}\n\n.uirStateVisHover > div {\n  transition: opacity 500ms ease;\n  opacity: 0;\n  height: 0;\n  padding: 0;\n\n  position: absolute;\n  top: 0;\n  right: 0;\n  overflow: hidden;\n\n  margin-top: 26px;\n  font-size: 14px;\n}\n\n.uirStateVisHover > div.hoverBlock {\n  left: 0;\n  border-bottom: none;\n  background: white;\n}\n\n.uirStateVisHover:hover > div.hoverBlock {\n  border-bottom: 2px solid lightgrey;\n}\n\n.uirStateVisHover:hover > div {\n  opacity: 1;\n  height: auto;\n}\n\n.uirStateVisHover .uirStateVisLayoutPrefs {\n  padding: 12px 24px;\n}\n\n.uirStateVisContainer .statevis {\n  flex: 1 1 auto;\n  transition: all 1s ease;\n}\n\n.uirStateVisWindowOverlay {\n  display: none;\n}\n\n.minimized .uirStateVisWindowOverlay {\n  display: block;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  z-index: 1000;\n}\n\n.statevis circle {\n  /*r: 10;*/\n  fill: #fff;\n  stroke: grey;\n  /*stroke-width: 3px;*/\n\n  transition-property: r, fill, stroke, stroke-width;\n  transition-duration: 350ms;\n  transition-timing-function: ease-in-out;\n\n  cursor: pointer;\n}\n\n.statevis text {\n  transition-property: x, y, font-size, stroke, stroke-width;\n  transition-duration: 350ms;\n  transition-timing-function: ease-in-out;\n}\n\n.statevis circle.future {\n  /*r: 10;*/\n  stroke: grey;\n  stroke-dasharray: 7, 5;\n  /*stroke-width: 1px;*/\n}\n\n.statevis circle.entered {\n  /*r: 10;*/\n  stroke: black;\n  fill: lightgreen;\n}\n\n.statevis circle.entered:after {\n  content: '<text>Entered</text>';\n}\n\n.statevis circle.active {\n  /*r: 15;*/\n  fill: green;\n  stroke: black;\n}\n\n.statevis circle.collapsed {\n  stroke-dasharray: 2, 2;\n}\n\n.statevis text {\n  font-family: sans-serif;\n}\n\n.statevis .link {\n  fill: none;\n  stroke: #ccc;\n  /*stroke-width: 2px;*/\n}\n\n.statevis text.label {\n  fill: grey;\n  alignment-baseline: middle;\n}\n\n.draggable {\n  cursor: move;\n}\n\n/*.draggable:hover {*/\n/*outline: 3px solid rgba(0,0,0,0.15)*/\n/*}*/\n";
styleInject(css_248z);

var StateVisualizer = /** @class */ (function (_super) {
    __extends(StateVisualizer, _super);
    function StateVisualizer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { height: null, width: null, renderer: DEFAULT_RENDERER, minimized: false };
        _this.deregisterFns = [];
        _this.svgWidth = function () { return _this.props.width || _this.state.width || 350; };
        _this.svgHeight = function () { return (_this.props.height || _this.state.height || 250) - 25; };
        return _this;
    }
    /**
     * Creates a new StateVisualizer and adds it to the document.
     *
     * @param router the UIRouter object
     * @param element (optional) the element where the StateVisualizer should be placed.
     *                If no element is passed, an element will be created in the body.
     * @param props height/width properties default: { height: 350, width: 250 }
     * @param options StateVisualizerOptions used to customise the styling of the visualizer
     *
     * # Angular 1 + UI-Router (1.0.0-beta.2 and higher):
     *
     * Inject the router (`$uiRouter`) in a run block, then call StateVisualizer.create();
     *
     * ```
     * app.run(function($uiRouter) {
     *   StateVisualizer.create($uiRouter);
     * });
     * ```
     *
     * # Angular 1 + UI-Router 1.0.0-alpha.1 through 1.0.0-beta.1:
     *
     * Inject the router (`ng1UIRouter`) in a run block, then call StateVisualizer.create();
     *
     * ```
     * app.run(function(ng1UIRouter) {
     *   StateVisualizer.create(ng1UIRouter);
     * });
     * ```
     *
     * Angular 2:
     *
     * Call StateVisualizer.create() from your UIRouterConfig
     *
     * ```
     * export class MyUIRouterConfig extends UIRouterConfig {
     *   configure(router: UIRouter) {
     *     StateVisualizer.create(router);
     *   }
     * }
     * ```
     *
     * React:
     *
     * Call StateVisualizer.create() from your bootstrap
     *
     * ```
     * let router = new UIRouterReact();
     * StateVisualizer.create(router);
     * router.start();
     * ```
     *
     * @return the element that was bootstrapped.
     *         You can destroy the component using:
     *         [ReactDOM.unmountComponentAtNode](https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode)
     */
    StateVisualizer.create = function (router, element, props, options) {
        if (props === void 0) { props = {}; }
        if (!element) {
            element = document.createElement('div');
            element.id = 'uirStateVisualizer';
        }
        var initialProps = Object.assign({}, props, { router: router, minimizeAfter: 2500, visualizationOptions: options });
        var _render = function () {
            document.body.appendChild(element);
            M(v(StateVisualizer, initialProps), element);
        };
        if (document.readyState === 'interactive' || document.readyState === 'complete') {
            _render();
        }
        else {
            document.addEventListener('DOMContentLoaded', _render, false);
        }
        return element;
    };
    StateVisualizer.prototype.dispose = function () {
        M(null, document.getElementById('uirStateVisualizer'), this.rootEl);
    };
    StateVisualizer.prototype.handleRendererChange = function (renderer) {
        this.setState({ renderer: renderer });
    };
    StateVisualizer.prototype.cancelAutoMinimize = function () {
        if (this.minimizeTimeout) {
            clearTimeout(this.minimizeTimeout);
            this.minimizeTimeout = null;
        }
    };
    StateVisualizer.prototype.componentWillUnmount = function () {
        this.deregisterFns.forEach(function (fn) { return fn(); });
    };
    StateVisualizer.prototype.draggable = function () {
        var controlsEl = this.windowEl.querySelector('.uirStateVisControls');
        var visEl = this.windowEl.querySelector('.statevis');
        this.deregisterFns.push(draggable(controlsEl, dragActions.move(this.windowEl)));
        this.deregisterFns.push(draggable(visEl, dragActions.move(this.windowEl)));
    };
    StateVisualizer.prototype.componentDidMount = function () {
        var _this = this;
        this.draggable();
        if (this.props.minimizeAfter) {
            var doMinimize = function () { return _this.setState({ minimized: true }); };
            this.minimizeTimeout = setTimeout(doMinimize, this.props.minimizeAfter);
        }
    };
    StateVisualizer.prototype.render = function () {
        var _this = this;
        var minimized = this.state.minimized;
        return (v("div", { ref: function (el) { return (_this.rootEl = el); }, onMouseDown: this.cancelAutoMinimize.bind(this), onMouseEnter: this.cancelAutoMinimize.bind(this) },
            v(StateVisWindow, { minimized: this.state.minimized, ref: function (windowRef) { return (_this.windowEl = (windowRef && windowRef.el) || _this.windowEl); }, onResize: function (_a) {
                    var width = _a.width, height = _a.height;
                    return _this.setState({ width: width, height: height });
                } },
                v("div", { onClick: function () { return _this.setState({ minimized: false }); }, className: "uirStateVisWindowOverlay " + (minimized ? 'minimized' : '') }),
                v(Controls, { router: this.props.router, onRendererChange: this.handleRendererChange.bind(this), onMinimize: function () { return _this.setState({ minimized: true }); }, onClose: function () { return _this.dispose(); } }),
                v(StateTree, { router: this.props.router, nodeOptions: this.props.visualizationOptions.node, width: this.svgWidth(), height: this.svgHeight(), renderer: this.state.renderer }))));
    };
    return StateVisualizer;
}(d));

var PopoverHeading = /** @class */ (function (_super) {
    __extends(PopoverHeading, _super);
    function PopoverHeading() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PopoverHeading.prototype.render = function () {
        var _this = this;
        var tackClass = function () { return 'uir-icon uir-icon-thumb-tack ' + (_this.props.pinned ? '' : 'uir-rotate-35'); };
        var expandClass = function () {
            return 'uir-icon uirTranVis_tooltipRight ' + (_this.props.expanded ? 'uir-icon-toggle-on' : 'uir-icon-toggle-off');
        };
        return (v("div", { className: "uirTranVis_panelHeading uirTranVis_heading" },
            v("div", { style: { cursor: 'pointer' }, onClick: this.props.togglePinned },
                v("i", { className: tackClass() })),
            v("h3", { className: "uirTranVis_panelTitle" },
                "Transition #",
                this.props.transition.$id),
            v("div", { style: { cursor: 'pointer' }, onClick: this.props.toggleExpand },
                v("i", { className: expandClass() }))));
    };
    return PopoverHeading;
}(d));

var Modal = /** @class */ (function (_super) {
    __extends(Modal, _super);
    function Modal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Modal.prototype.componentDidMount = function () {
        var el = this._ref;
        setTimeout(function () {
            var fades = el.getElementsByClassName('uir-fade');
            [].slice.apply(fades).forEach(function (node) { return (node.className += ' in'); });
        }, 35);
    };
    Modal.prototype.render = function () {
        var _this = this;
        return (v("div", { ref: function (ref) { return (_this._ref = ref); } },
            v("div", { className: "uirTranVis_modal-backdrop uir-fade", style: { zIndex: 1040 } }),
            v("div", { tabIndex: -1, className: "uirTranVis_modal uir-fade", style: { zIndex: 1050, display: 'block' } },
                v("div", { className: "uirTranVis_modal-dialog modal-lg" },
                    v("div", { className: "uirTranVis_modal-content" }, this.props.children)))));
    };
    Modal.show = function (modalTitle, id, value, component) {
        var modal = document.body.querySelector('#uirTranVis_modal');
        if (!modal) {
            modal = document.createElement('div');
            modal.id = 'uirTranVis_modal';
            document.body.appendChild(modal);
        }
        var Nothing = function () { return null; };
        var close = function () { return M(v(Nothing, null), document.body, modal); };
        M(v(component, { close: close, modalTitle: modalTitle, id: id, value: value }), modal);
    };
    return Modal;
}(d));

var Pretty = /** @class */ (function (_super) {
    __extends(Pretty, _super);
    function Pretty() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.preStyle = {
            display: 'block',
            padding: '10px 30px',
            margin: '0',
        };
        _this.state = { show: true };
        return _this;
    }
    Pretty.prototype.toggle = function () {
        this.setState({
            show: !this.state.show,
        });
    };
    Pretty.prototype.render = function () {
        return (v("div", null, this.state.show ? v("pre", { style: this.preStyle }, JSON.stringify(this.props.data, null, 2)) : false));
    };
    return Pretty;
}(d));

var ResolveData = /** @class */ (function (_super) {
    __extends(ResolveData, _super);
    function ResolveData() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.close = function () { return _this.props.close(); };
        return _this;
    }
    ResolveData.prototype.render = function () {
        return (v("div", null,
            v(Modal, null,
                v("div", { className: "uirTranVis_modal-header uir-resolve-header" },
                    v("div", { style: { fontSize: '20px' } },
                        this.props.modalTitle,
                        ": ",
                        this.props.id),
                    v("button", { className: "uirTranVis_btn uirTranVis_btnXs uirTranVis_btnPrimary", onClick: this.close },
                        v("i", { className: "uir-icon uir-iconw-close" }))),
                v("div", { className: "uirTranVis_modalBody" },
                    v(Pretty, { data: this.props.value })),
                v("div", { className: "uirTranVis_modalFooter" },
                    v("button", { className: "uirTranVis_btn uirTranVis_btnPrimary", onClick: this.close }, "Close")))));
    };
    return ResolveData;
}(d));

/**
 * Returns a string shortened to a maximum length
 *
 * If the string is already less than the `max` length, return the string.
 * Else return the string, shortened to `max - 3` and append three dots ("...").
 *
 * @param max the maximum length of the string to return
 * @param str the input string
 */
function maxLength(max, str) {
    if (str.length <= max)
        return str;
    return str.substr(0, max - 3) + '...';
}
function stringifyPattern(value) {
    if (value === undefined)
        return 'undefined';
    if (value === null)
        return 'null';
    if (typeof value === 'object' && typeof value.then === 'function')
        return '[Promise]';
    return value;
}
function stringify(o) {
    var seen = [];
    function format(val) {
        if (typeof val === 'object') {
            if (seen.indexOf(val) !== -1)
                return '[circular ref]';
            seen.push(val);
        }
        return stringifyPattern(val);
    }
    return JSON.stringify(o, function (key, val) { return format(val); }).replace(/\\"/g, '"');
}

var KeyValueRow = /** @class */ (function (_super) {
    __extends(KeyValueRow, _super);
    function KeyValueRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KeyValueRow.prototype.render = function () {
        var _a = this.props, _b = _a.tuple, key = _b.key, val = _b.val, classes = _a.classes, modalTitle = _a.modalTitle;
        var showModal = function () { return Modal.show(modalTitle, key, val, ResolveData); };
        // prettier-ignore
        var renderValue = function () {
            if (val === undefined)
                return v("span", { className: "uirTranVis_code" }, "undefined");
            if (val === null)
                return v("span", { className: "uirTranVis_code" }, "null");
            if (typeof val === 'string')
                return v("span", { className: "uirTranVis_code" },
                    "\"",
                    maxLength(100, val),
                    "\"");
            if (typeof val === 'number')
                return v("span", { className: "uirTranVis_code" }, val.toString());
            if (typeof val === 'boolean')
                return v("span", { className: "uirTranVis_code" }, val.toString());
            if (Array.isArray(val))
                return v("span", { className: "link", onClick: showModal }, "[Array]");
            if (typeof val === 'object')
                return v("span", { className: "link", onClick: showModal }, "[Object]");
            if (typeof val.toString === 'function')
                return v("span", null, maxLength(100, val.toString()));
        };
        return (v("div", { className: classes.div },
            v("div", { className: classes.key },
                key,
                ":"),
            v("div", { className: classes.val }, renderValue())));
    };
    return KeyValueRow;
}(d));
var KeysAndValues = /** @class */ (function (_super) {
    __extends(KeysAndValues, _super);
    function KeysAndValues() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { collapseFalsy: true };
        return _this;
    }
    KeysAndValues.prototype.makeBuckets = function (definitions, data) {
        var makeBucket = function (def) { return ({
            label: def.label,
            is: function (val) { return val === def.value; },
            value: def.value,
            count: 0,
            data: {},
        }); };
        var defaultBucket = {
            label: 'default',
            is: function () { return true; },
            count: 0,
            data: {},
        };
        var buckets = definitions.map(makeBucket).concat(defaultBucket);
        Object.keys(data).forEach(function (key) {
            var bucket = buckets.find(function (bucket) { return bucket.is(data[key]); });
            bucket.data[key] = data[key];
            bucket.value = data[key];
            bucket.count++;
        });
        return buckets;
    };
    KeysAndValues.prototype.render = function () {
        var _this = this;
        var _a = this.props, data = _a.data, classes = _a.classes, modalTitle = _a.modalTitle;
        var groupedValues = this.props.groupedValues || KeysAndValues.falsyGroupDefinitions;
        var enableGroupToggle = this.props.enableGroupToggle || false;
        var isCollapsed = this.state.collapseFalsy;
        var buckets = this.makeBuckets(groupedValues, data);
        var defaultBucket = buckets.find(function (bucket) { return bucket.label === 'default'; });
        var groupedBuckets = buckets.filter(function (bucket) { return !!bucket.count && bucket !== defaultBucket; });
        var groupedCount = groupedBuckets.reduce(function (total, bucket) { return (total += bucket.count); }, 0);
        var tuples = Object.keys(defaultBucket.data).map(function (key) { return ({ key: key, val: defaultBucket.data[key] }); });
        var groupedTuples = groupedBuckets.map(function (bucket) {
            var key = Object.keys(bucket.data)
                .sort()
                .join(', ');
            var val = bucket.value;
            return { key: key, val: val };
        });
        var showGroupToggle = enableGroupToggle && groupedCount > 1;
        return (v("div", { className: "uirTranVis_keysAndValues" },
            tuples.map(function (tuple) { return v(KeyValueRow, { key: tuple.key, tuple: tuple, classes: classes, modalTitle: modalTitle }); }),
            showGroupToggle &&
                !!groupedTuples.length && (v("a", { href: "javascript:void(0)", onClick: function () { return _this.setState({ collapseFalsy: !isCollapsed }); }, className: "uirTranVis_keyValue" },
                isCollapsed ? 'show' : 'hide',
                " ",
                groupedCount,
                " ",
                groupedBuckets.map(function (bucket) { return bucket.label; }).join(' or '),
                ' ',
                "parameter values")),
            (!showGroupToggle || !this.state.collapseFalsy) &&
                groupedTuples.map(function (tuple) { return (v(KeyValueRow, { key: tuple.key, tuple: tuple, classes: classes, modalTitle: modalTitle })); })));
    };
    KeysAndValues.falsyGroupDefinitions = [
        { value: undefined, label: 'undefined' },
        { value: null, label: 'null' },
        { value: '', label: 'empty string' },
    ];
    return KeysAndValues;
}(d));

var TransSummary = /** @class */ (function (_super) {
    __extends(TransSummary, _super);
    function TransSummary() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TransSummary.prototype.render = function () {
        return (v("div", { className: "uirTranVis_transSummary" },
            v("div", { className: "uirTranVis_summaryData" },
                v("span", null, "From:"),
                v("strong", null, this.props.trans.from().name || '(root)')),
            v("div", { className: "uirTranVis_summaryData" },
                v("span", null, "To:"),
                v("strong", null, this.props.trans.to().name || '(root)')),
            v("div", { className: "uirTranVis_summaryData" },
                v("span", null, "Result:"),
                v("div", null,
                    v("strong", null, this.props.status),
                    this.props.rejection ? v("span", null,
                        ": ",
                        this.props.rejection) : null)),
            v("div", { className: "uirTranVis_summaryHeading" }, "Parameter Values:"),
            v("div", null,
                v(KeysAndValues, { groupedValues: KeysAndValues.falsyGroupDefinitions, enableGroupToggle: true, data: this.props.trans.params(), modalTitle: "Parameter value", classes: { div: 'uirTranVis_keyValue', key: '', val: '' } }))));
    };
    return TransSummary;
}(d));

var NodeDetail = /** @class */ (function (_super) {
    __extends(NodeDetail, _super);
    function NodeDetail() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NodeDetail.prototype.stateName = function () {
        var node = this.props.node;
        var name = node && node.state && node.state.name;
        if (name === '')
            name = '(root)';
        return name && name.split('.').reverse()[0];
    };
    NodeDetail.prototype.params = function () {
        var node = this.props.node;
        return (node &&
            node.paramSchema.reduce(function (params, param) {
                params[param.id] = node.paramValues[param.id];
                return params;
            }, {}));
    };
    NodeDetail.prototype.resolves = function () {
        var asString = function (val) { return (typeof val === 'string' ? val : maxLength(30, stringify(val))); };
        var node = this.props.node;
        var ignoredTokens = ['$stateParams', '$transition$', '$state$', this.props.trans.constructor];
        return (node &&
            node.resolvables.filter(function (r) { return ignoredTokens.indexOf(r.token) === -1; }).reduce(function (acc, r) {
                acc[asString(r.token)] = r.data;
                return acc;
            }, {}));
    };
    NodeDetail.prototype.render = function () {
        if (!this.props.node)
            return null;
        var params = this.params();
        var resolves = this.resolves();
        return !this.props.node ? null : (v("div", { className: "uirTranVis_nodeDetail" },
            v("div", { className: "uirTranVis_heading" },
                v("div", { className: "uirTranVis_nowrap uirTranVis_deemphasize" },
                    "(",
                    this.props.type,
                    " state)"),
                v("div", { className: "uirTranVis_stateName" }, this.stateName())),
            !!Object.keys(params).length && (v("div", { className: "params" },
                v("div", { className: "uirTranVis_paramsLabel uirTranVis_deemphasize" }, "Parameter values"),
                v(KeysAndValues, { data: this.params(), classes: { div: 'uirTranVis_keyValue' }, modalTitle: "Parameter value" }))),
            !!Object.keys(resolves).length && (v("div", { className: "params resolve" },
                v("div", { className: "uirTranVis_resolveLabel uirTranVis_deemphasize" }, "Resolved data"),
                v(KeysAndValues, { data: this.resolves(), classes: { div: 'uirTranVis_keyValue' }, modalTitle: "Resolved value" })))));
    };
    return NodeDetail;
}(d));

var FlowArrow = /** @class */ (function (_super) {
    __extends(FlowArrow, _super);
    function FlowArrow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.height = 1000;
        _this.renderCurve = function () { return (v("path", { stroke: "white", "stroke-width": "20", fill: "none", d: "M50 " + _this.height + " V 70 Q50 20, 100 20 Q150 20, 150 70 V " + _this.height })); };
        _this.renderVerticalLine = function () { return (v("svg", { viewBox: "0 70 100 " + (_this.height - 70), className: "flowArrowSvg" }, _this.renderCurve())); };
        _this.renderCurveRU = function () { return (v("svg", { viewBox: "0 0 100 " + _this.height, className: "flowArrowSvg top" }, _this.renderCurve())); };
        _this.renderCurveRD = function () { return (v("svg", { viewBox: "100 0 100 " + _this.height, className: "flowArrowSvg top" }, _this.renderCurve())); };
        _this.renderArrowU = function () { return (v("svg", { viewBox: "0 0 100 " + _this.height, className: "flowArrowSvg top" },
            v("path", { stroke: "white", "stroke-width": "20", fill: "none", d: "M50 " + _this.height + " V 20 " }),
            v("polygon", { fill: "white", stroke: "white", "stroke-width": "20", points: "50,20 35,40 65,40" }))); };
        _this.renderArrowD = function () { return (v("svg", { viewBox: "0 0 100 " + _this.height, className: "flowArrowSvg bottom" },
            v("path", { stroke: "white", "stroke-width": "20", fill: "none", d: "M50 0 V " + (_this.height - 20) }),
            v("polygon", { fill: "white", stroke: "white", "stroke-width": "20", points: "50," + (_this.height - 20) + " 35," + (_this.height - 40) + " 65," + (_this.height - 40) }))); };
        return _this;
    }
    FlowArrow.prototype.render = function () {
        var _this = this;
        var renderSvg = function (type) {
            switch (type) {
                case 'V':
                    return _this.renderVerticalLine();
                case 'RU':
                    return _this.renderCurveRU();
                case 'RD':
                    return _this.renderCurveRD();
                case 'AU':
                    return _this.renderArrowU();
                case 'AD':
                    return _this.renderArrowD();
                default:
                    return null;
            }
        };
        return (v("div", { className: "flowArrowCell" },
            v("div", { style: { overflow: 'hidden', position: 'relative', flex: '1' } }, renderSvg(this.props.top)),
            v("div", { style: { overflow: 'hidden', position: 'relative', flex: '1' } }, renderSvg(this.props.bottom))));
    };
    return FlowArrow;
}(d));

var NodePaths = /** @class */ (function (_super) {
    __extends(NodePaths, _super);
    function NodePaths() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            retained: [],
            enterExit: [],
        };
        return _this;
    }
    NodePaths.prototype.componentDidMount = function () {
        var trans = this.props.transition;
        var tcPaths = Object.assign({}, trans.treeChanges());
        // Ignore the root state when drawing paths.
        ['entering', 'exiting', 'retained'].forEach(function (key) { return (tcPaths[key] = tcPaths[key].filter(function (node) { return !!node.state.name; })); });
        var partialKey = function (pathname, idx) {
            var node = tcPaths[pathname][idx];
            return node ? node.state.name : '';
        };
        var key = function (pathname1, pathname2, idx) {
            return trans.$id + "." + partialKey(pathname1, idx) + "-" + partialKey(pathname2, idx);
        };
        var retained = tcPaths.retained.map(function (node, idx) { return ({
            key: key('retained', 'retained', idx),
            to: node,
            toType: 'retain',
            from: node,
            fromType: 'retain',
        }); });
        var enterExit = [];
        var maxPathLength = Math.max(tcPaths.exiting.length, tcPaths.entering.length);
        for (var i = 0; i < maxPathLength; i++) {
            enterExit.push({
                key: key('exiting', 'entering', i),
                to: tcPaths.entering[i],
                toType: tcPaths.entering[i] && 'enter',
                from: tcPaths.exiting[i],
                fromType: tcPaths.exiting[i] && 'exit',
            });
        }
        this.setState({ retained: retained, enterExit: enterExit });
    };
    NodePaths.prototype.render = function () {
        var _this = this;
        var retained = this.state.retained || [];
        var enterExit = this.state.enterExit || [];
        var lastEnterIdx = enterExit.filter(function (x) { return !!x.toType; }).length - 1;
        return (v("table", { className: "uirTranVis_paths" },
            v("thead", null,
                v("tr", null,
                    v("th", null, "From Path"),
                    v("th", null, "To Path"))),
            v("tbody", null,
                retained.map(function (elem) { return (v("tr", { key: elem.key },
                    v("td", { className: elem.fromType, colSpan: 2 },
                        v(NodeDetail, { trans: _this.props.transition, node: elem.from, type: elem.fromType })))); }),
                enterExit.map(function (elem, idx) { return (v("tr", { key: elem.key },
                    v("td", { colSpan: 2 },
                        v("div", { className: "uirTranVis_Row" },
                            v("div", { className: "" + elem.fromType }, !elem.fromType ? null : (v("div", { className: "uirTranVis_nodeContent" },
                                v(NodeDetail, { trans: _this.props.transition, node: elem.from, type: elem.fromType }),
                                v(FlowArrow, { bottom: "V", top: idx ? 'V' : elem.toType ? 'RU' : 'AU' })))),
                            v("div", { className: "" + elem.toType }, !elem.toType ? null : (v("div", { className: "uirTranVis_nodeContent" },
                                v(FlowArrow, { top: idx ? 'V' : elem.fromType ? 'RD' : 'V', bottom: idx == lastEnterIdx ? 'AD' : 'V' }),
                                v(NodeDetail, { trans: _this.props.transition, node: elem.to, type: elem.toType })))))))); }))));
    };
    return NodePaths;
}(d));

var TransitionPopover = /** @class */ (function (_super) {
    __extends(TransitionPopover, _super);
    function TransitionPopover() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TransitionPopover.prototype.render = function () {
        var _this = this;
        if (!this.props.open && !this.props.pinned)
            return null;
        var classes = function () {
            return 'uirTranVis_transitionDetail uirTranVis_panel panel-default ' +
                (_this.props.pinned ? 'pin ' : '') +
                (_this.props.expanded ? 'expand ' : '') +
                (_this.props.open ? 'showDetail ' : '');
        };
        return (v("div", { className: classes() },
            v(PopoverHeading, { transition: this.props.transition, pinned: this.props.pinned, expanded: this.props.expanded, togglePinned: this.props.togglePinned, toggleExpand: this.props.toggleExpand }),
            v("div", { className: "uirTranVis_panelBody" },
                v(TransSummary, { trans: this.props.transition, status: this.props.status, rejection: this.props.rejection }),
                v("hr", null),
                v(NodePaths, { transition: this.props.transition })),
            v("div", { className: "uirTranVis_downArrow" })));
    };
    return TransitionPopover;
}(d));

var BreadcrumbArrow = /** @class */ (function (_super) {
    __extends(BreadcrumbArrow, _super);
    function BreadcrumbArrow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleClick = function () { return _this.props.toggleExpand(); };
        return _this;
    }
    BreadcrumbArrow.prototype.iconClass = function () {
        var iconClasses = {
            running: 'uir-icon uir-spin uir-iconw-spinner',
            success: 'uir-icon uir-iconw-check',
            redirected: 'uir-icon uir-iconw-share',
            ignored: 'uir-icon uir-iconw-circle-o',
            error: 'uir-icon uir-iconw-close',
        };
        return iconClasses[this.props.status];
    };
    BreadcrumbArrow.prototype.render = function () {
        return !this.props.transition ? null : (v("div", { className: this.props.status + ' uirTranVis_historyEntry', onClick: this.handleClick },
            v("div", { className: "uirTranVis_historyEntrySummary" },
                v("div", { className: "uirTranVis_transId" }, this.props.transition.$id),
                v("div", { className: "uirTranVis_status" },
                    this.props.status,
                    !this.props.message ? null : v("span", null,
                        ": ",
                        this.props.message)),
                v("div", { className: "uirTranVis_transName" },
                    v("i", { className: this.iconClass() }),
                    v("span", null, this.props.transition.to().name)))));
    };
    return BreadcrumbArrow;
}(d));

var makeCancelable = function (promise) {
    var hasCanceled_ = false;
    var wrappedPromise = new Promise(function (resolve, reject) {
        promise.then(function (val) { return (hasCanceled_ ? reject({ isCanceled: true }) : resolve(val)); }, function (error) { return (hasCanceled_ ? reject({ isCanceled: true }) : reject(error)); });
    });
    var cancelablePromise = {
        promise: wrappedPromise,
        isCanceled: false,
        cancel: function () {
            cancelablePromise.isCanceled = hasCanceled_ = true;
        },
    };
    return cancelablePromise;
};

var TransitionView = /** @class */ (function (_super) {
    __extends(TransitionView, _super);
    function TransitionView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.transitionPromise = null;
        _this.state = {
            status: 'running',
            message: null,
            rejection: null,
            pinned: false,
            expanded: false,
            open: false,
            deregisterFunctions: [],
        };
        _this.togglePin = function () { return _this.setState({ pinned: !_this.state.pinned }); };
        _this.toggleExpand = function () { return _this.setState({ expanded: !_this.state.expanded }); };
        _this.open = function () { return _this.setState({ open: true }); };
        _this.close = function () { return _this.setState({ open: false }); };
        return _this;
    }
    TransitionView.prototype.componentDidMount = function () {
        var _this = this;
        var trans = this.props.transition;
        var setMessage = function (message) {
            // Transition hooks are computed when the trans starts; they can't be removed while the trans is running.
            if (!_this.transitionPromise.isCanceled) {
                _this.setState({ message: message });
            }
        };
        var statename = function (state) { return state.name || '(root)'; };
        var fns = [];
        fns.push(trans.onStart({}, function () { return setMessage('Starting...'); }, { priority: 10000 }));
        fns.push(trans.onExit({}, function (t, state) { return setMessage("Exiting " + statename(state)); }, { priority: 10000 }));
        fns.push(trans.onRetain({}, function (t, state) { return setMessage("Retained " + statename(state)); }, { priority: 10000 }));
        fns.push(trans.onEnter({}, function (t, state) { return setMessage("Entering " + statename(state)); }, { priority: 10000 }));
        fns.push(trans.onFinish({}, function () { return setMessage("Finishing..."); }));
        this.setState({ deregisterFunctions: fns });
        var success = function () { return _this.setState({ status: 'success', message: null }); };
        var error = function (err) {
            if (err && err.isCanceled)
                return;
            var status = 'error', rejection = null;
            if (err) {
                rejection = err && err.message;
                var type = err && err.type;
                if (type == 2 && err.redirected === true) {
                    status = 'redirected';
                    var targetState = err['detail'];
                    var toState = targetState.name();
                    var toParams = JSON.stringify(targetState.params());
                    rejection = maxLength(100, toState + "(" + toParams) + ')';
                }
                if (type == 5) {
                    status = 'ignored';
                    rejection = 'All states and parameters in the To and From paths are identical.';
                }
            }
            _this.setState({ status: status, rejection: rejection, message: null });
        };
        this.transitionPromise = makeCancelable(trans.promise);
        this.transitionPromise.promise.then(success, error);
    };
    TransitionView.prototype.componentWillUnmount = function () {
        this.transitionPromise.cancel();
        if (this.state.deregisterFunctions) {
            this.state.deregisterFunctions.forEach(function (fn) { return fn(); });
        }
    };
    TransitionView.prototype.render = function () {
        return (v("div", { onMouseEnter: this.open, onMouseLeave: this.close },
            v(TransitionPopover, { transition: this.props.transition, status: this.state.status, rejection: this.state.rejection, pinned: this.state.pinned, expanded: this.state.expanded, open: this.state.open, togglePinned: this.togglePin, toggleExpand: this.toggleExpand }),
            v(BreadcrumbArrow, { transition: this.props.transition, status: this.state.status, message: this.state.message, toggleExpand: this.toggleExpand })));
    };
    return TransitionView;
}(d));

var css_248z$1 = "/*\n    .uirTranVis_history is the breadcrumbs and transition details block.\n    It fills the footer of the screen, and scrolls horizontally.\n    Mouse clicks should pass through to the elements underneath.\n*/\n\n.uirTranVis_history {\n    display: flex;\n    align-items: flex-end;\n    position: fixed;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    padding: 0 16px;\n    overflow-x: scroll;\n    z-index: 999;\n    /* disable mouse clicks, hover, etc, for the overall div */\n    pointer-events: none;\n}\n\n.uirTranVis_history > * {\n    /* Enable mouse for any sub-elements (the breadcrumb elemetns and detail elements) */\n    pointer-events: all;\n    flex: 0 0 auto;\n}\n\n/*  workaround for modal screen, and chrome and safari not allowing it to be\n    visible outside the .uirTranVis_history overflow while the .uirTranVis_history div is scrolled */\n.fullScreen .uirTranVis_history {\n    top: 0;\n}\n\n/* A single history entry (breadcrumb) arrow looking thing */\n.uirTranVis_history .uirTranVis_historyEntry {\n    position: relative;\n    text-align: center;\n    padding: 12px 30px;\n    margin-bottom: 6px;\n    margin-right: 6px;\n    color: #000;\n    cursor: pointer;\n}\n\n\n/* History entry arrow CSS */\n.uirTranVis_history .uirTranVis_historyEntry:before,.uirTranVis_historyEntry:after {\n    content: '';\n    position: absolute;\n    background: darkgrey;\n    left: 0;\n    height: 50.2%; /* +0.2% so firefox doesn't render a white line down the center */\n    width: 100%;\n    border: 1px solid black;\n    box-sizing: border-box;\n    z-index: -1;\n}\n\n.uirTranVis_history .uirTranVis_historyEntry:before {\n    top: 0;\n    border-bottom: 0;\n    -webkit-transform: skew(40deg, 0deg);\n    -ms-transform: skew(40deg, 0deg);\n    transform: skew(40deg, 0deg);\n}\n\n.uirTranVis_history .uirTranVis_historyEntry:after {\n    bottom: 0;\n    border-top: 0;\n    -webkit-transform: skew(-40deg, 0deg);\n    -ms-transform: skew(-40deg, 0deg);\n    transform: skew(-40deg, 0deg);\n}\n\n/*.uirTranVis_historyEntry::before height: 51% (|| ::after) */\n\n/* Styling for breadcrumb contents */\n.uirTranVis_historyEntry .uirTranVis_historyEntrySummary {\n    color: white;\n    white-space: nowrap;\n    font-size: small;\n}\n.uirTranVis_historyEntry .uirTranVis_historyEntrySummary .uirTranVis_transId {\n    position: absolute;\n    top: 3px;\n    left: 10px;\n    font-size: smaller;\n}\n.uirTranVis_historyEntry .uirTranVis_historyEntrySummary .uirTranVis_status {\n    position: absolute;\n    bottom: 3px;\n    left: 10px;\n    font-size: smaller;\n}\n.uirTranVis_historyEntry .uirTranVis_historyEntrySummary .uirTranVis_transName {\n    font-weight: bold;\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: center;\n    justify-content: center\n}\n.uirTranVis_historyEntry .uirTranVis_historyEntrySummary .uirTranVis_transName span {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    direction: rtl;\n}\n\n.uirTranVis_transSummary {\n    margin: 8px 0;\n}\n.uirTranVis_transSummary .uirTranVis_summaryHeading {\n    background-color: #f5f5f5;\n    margin: 8px -16px;\n    padding: 4px 16px;\n}\n.uirTranVis_transSummary .uirTranVis_summaryData {\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: baseline;\n}\n.uirTranVis_transSummary .uirTranVis_summaryData span {\n    min-width: 60px;\n    text-align: right;\n    padding-right: 6px;\n}\n.uirTranVis_transSummary .uirTranVis_summaryData strong {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    direction: rtl;\n}\n\n.uirTranVis_history .uirTranVis_code {\n    padding: 0px 2px;\n    color: black;\n    background: #e6e6e6;\n    margin: 0;\n    font-family: monospace;\n}\n\n/* breadcrumb/history entry color coding */\n.uirTranVis_history .uirTranVis_historyEntry:before,.uirTranVis_historyEntry:after {\n    background: #737373;\n}\n.uirTranVis_history .uirTranVis_historyEntry:hover:before,.uirTranVis_historyEntry:hover:after {\n    background: #a6a6a6;\n}\n\n.uirTranVis_history .uirTranVis_historyEntry.success:before,.uirTranVis_historyEntry.success:after {\n    background: #45803b;\n}\n.uirTranVis_history .uirTranVis_historyEntry.success:hover:before,.uirTranVis_historyEntry.success:hover:after {\n    background: #19a600;\n}\n\n\n.uirTranVis_history .uirTranVis_historyEntry.error:before,.uirTranVis_historyEntry.error:after {\n    background: #bf1f1d;\n}\n.uirTranVis_history .uirTranVis_historyEntry.error:hover:before,.uirTranVis_historyEntry.error:hover:after {\n    background: #e62622;\n}\n\n\n.uirTranVis_history .uirTranVis_historyEntry.ignored:before,.uirTranVis_historyEntry.ignored:after {\n    background: #e68b05;\n}\n.uirTranVis_history .uirTranVis_historyEntry.ignored:hover:before,.uirTranVis_historyEntry.ignored:hover:after {\n    background: #ff9808;\n}\n\n.uirTranVis_history .uirTranVis_historyEntry.redirected:before,.uirTranVis_historyEntry.redirected:after {\n    background: #e68b05;\n}\n.uirTranVis_history .uirTranVis_historyEntry.redirected:hover:before,.uirTranVis_historyEntry.redirected:hover:after {\n    background: #ff9808;\n}\n\n.uirTranVis_history .uirTranVis_keyValue {\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    align-items: baseline;\n}\n\n.uirTranVis_history .uirTranVis_keyValue + .uirTranVis_keyValue {\n    margin-top: 3px;\n}\n\n\n\n\n/* The transition detail popover (when hovering over a breadcrumb) */\n.uirTranVis_transitionDetail {\n    border: 1px solid lightgrey;\n    font-size: small;\n    transition: box-shadow 0.5s ease,  border 1.0s ease\n}\n\n/* Pointer element points from the uirTranVis_transitionDetail to the breadcrumb */\n.uirTranVis_transitionDetail .uirTranVis_downArrow {\n    position: relative;\n    width: 100%;\n    bottom: -10px;\n    margin-bottom: 10px;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_downArrow:before, .uirTranVis_transitionDetail .uirTranVis_downArrow:after {\n    content: \"\";\n    position: absolute;\n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    top: 100%;\n    left: 50%;\n    margin-left: -10px;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_downArrow:before {\n    border-top: 10px solid lightgray;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_downArrow:after{\n    border-top: 10px solid white;\n    margin-top: -1px;\n    z-index: 1;\n}\n\n\n/* The layout and styling of the transition detail popover */\n/*.uirTranVis_transitionDetail .panel-heading {*/\n    /*text-align: center;*/\n/*}*/\n\n.uirTranVis_transitionDetail table {\n    border-collapse: collapse;\n}\n\n.uirTranVis_transitionDetail th {\n    text-align: center;\n    font-size: small;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_heading {\n    display: flex;\n    flex-flow: row-reverse nowrap;\n    justify-content: space-between;\n    align-items: baseline;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_heading > *  {\n    flex: 0 1 auto;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_heading > * i {\n    transition: all 0.5s ease;\n}\n\n.uirTranVis_transitionDetail table.uirTranVis_paths {\n    width: 100%;\n}\n\n.uirTranVis_transitionDetail table.uirTranVis_paths td {\n    color: white;\n    border: 0;\n    font-size: small;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_transSummary .uirTranVis_keyValue > div:nth-child(2){\n    padding-left: 8px;\n    font-weight: normal;\n}\n\n\n.uirTranVis_transitionDetail td {\n    padding: 0;\n}\n\n.uirTranVis_transitionDetail td .flowArrowCell {\n    display: flex;\n    flex-flow: column nowrap;\n    align-items: stretch;\n    justify-content: space-between;\n    width: 12px;\n    transition: width 0.25s ease;\n    height: auto;\n    flex: 0 0 auto;\n}\n.uirTranVis_transitionDetail.expand td .flowArrowCell { width: 24px; }\n\n.uirTranVis_transitionDetail .exit  .flowArrowSvg          { right: 0; }\n.uirTranVis_transitionDetail .enter .flowArrowSvg          { left: 0; }\n.uirTranVis_transitionDetail        .flowArrowSvg.bottom   { bottom: 0 }\n.uirTranVis_transitionDetail        .flowArrowSvg.top      { top: 0 }\n.uirTranVis_transitionDetail        .flowArrowSvg {\n    position: absolute;\n    width: 100%;\n    height: auto;\n    transition: width 0.25s ease;\n}\n\n/* color code path elements by retained/exited/entered */\n.uirTranVis_transitionDetail .retain {\n    background-color: #737273;\n}\n\n.uirTranVis_transitionDetail .exit {\n    background-color: #7c1010;\n}\n\n.uirTranVis_transitionDetail .enter {\n    background-color: #31592a;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_deemphasize {\n    color: #eaeaea;\n    font-size: x-small;\n}\n\n/* Styling for parameter values and resolve values */\n.uirTranVis_transitionDetail .params {\n    background-color: rgba(255,255,255,0.15);\n    padding: 0;\n    opacity: 0;\n    overflow: hidden;\n    transition: opacity 1s ease;\n    max-height: 0;\n}\n\n.uirTranVis_transitionDetail.expand .params {\n    display: block;\n    border-radius: 4px;\n    box-shadow: 1px 1px 2px black;\n    padding: 8px;\n    max-height: 250px;\n    overflow-y: auto;\n    opacity: 1;\n    margin: 8px 0;\n}\n\n.uirTranVis_transitionDetail.pin {\n    box-shadow: 4px 4px 12px rgba(0,0,0,0.3);\n    border: 1px solid black;\n}\n\n.uirTranVis_transitionDetail.pin .uirTranVis_downArrow:before {\n    border-top-color: black;\n}\n\n\n/* When showing expanded details, put space between path elements */\n.uirTranVis_transitionDetail.expand table.uirTranVis_paths td {\n    max-height: 100px;\n    vertical-align: top;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_Row {\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    align-items: stretch;\n    min-width: 400px;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_Row > div {\n    flex: 1 0 50%;\n    min-width: 0;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_nodeContent {\n    display: flex;\n    flex-flow: row nowrap;\n    min-height: 16px;\n    transition: min-height 0.25s ease;\n}\n\n.uirTranVis_transitionDetail.expand .uirTranVis_nodeContent {\n    height: 100%;\n    min-height: 65px;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_nodeDetail {\n    flex: 1 1 auto;\n    padding: 3px 7px;\n    min-width: 0;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_stateName {\n    font-weight: bolder;\n    margin-right: 16px;\n    margin-left: 0;\n}\n.uirTranVis_transitionDetail .enter .uirTranVis_stateName {\n    margin-right: 0;\n    margin-left: 16px;\n}\n\n.uirTranVis_transitionDetail .uirTranVis_nowrap {\n    white-space: nowrap;\n}\n\n.uirTranVis_history .uirTranVis_paramsLabel,\n.uirTranVis_history .uirTranVis_resolveLabel {\n    color: white;\n    margin-top: -8px;\n    text-align: center;\n    font-weight: bold;\n}\n\n\nspan.link {\n    cursor: pointer;\n    text-decoration: underline;\n}\n\n\n.uirTranVis_tooltipRight {\n    display: inline;\n    position: relative;\n    transition: all 1.5s ease;\n}\n\n.uirTranVis_tooltipRight:after {\n    color: rgba(0,0,0,0);\n    text-decoration: none;\n    transition: all 1.5s ease;\n}\n\n.uirTranVis_tooltipRight:hover:after {\n    bottom: 0;\n    color: rgba(0,0,0,0.5);\n    content: attr(title);\n    display: block;\n    position: absolute;\n    white-space: nowrap;\n    font-size: smaller;\n}\n\n\n\n/* Bootstrap stuff */\n\n.uirTranVis_modal .uirTranVis_btnPrimary {\n    color: #fff;\n    background-color: #337ab7;\n    border-color: #2e6da4;\n}\n\n.uirTranVis_modal .uirTranVis_btn {\n    display: inline-block;\n    padding: 6px 12px;\n    margin-bottom: 0;\n    font-size: 14px;\n    font-weight: normal;\n    line-height: 1.42857143;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    -ms-touch-action: manipulation;\n    touch-action: manipulation;\n    cursor: pointer;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    background-image: none;\n    border: 1px solid transparent;\n    border-radius: 4px;\n}\n\n.uirTranVis_modal .uirTranVis_btnXs, .uirTranVis_btnGroupXs > .uirTranVis_btn {\n    padding: 1px 5px;\n    font-size: 12px;\n    line-height: 1.5;\n    border-radius: 3px;\n}\n\n.uirTranVis_transition {\n    max-width: 550px;\n}\n\n.uirTranVis_transitionDetail span.link {\n    color: white;\n}\n\n.uirTranVis_history *:not(.fa):not(pre):not(.uirTranVis_code) {\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.uirTranVis_transitionDetail .enter .uirTranVis_heading {\n    flex-flow: row nowrap;\n}\n.uirTranVis_transitionDetail .uirTranVis_heading {\n    display: flex;\n    flex-flow: row-reverse nowrap;\n    justify-content: space-between;\n    align-items: baseline;\n}\n\n.uirTranVis_transitionDetail .retain .uirTranVis_heading {\n    justify-content: center;\n}\n\n.uirTranVis_panel {\n    margin-bottom: 20px;\n    background-color: #fff;\n    border: 1px solid lightgrey;\n    border-radius: 4px;\n    -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\n    box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\n}\n\n.uirTranVis_panelHeading {\n    color: #333;\n    background-color: #f5f5f5;\n    border-color: #ddd;\n\n    padding: 10px 16px;\n    border-bottom: 1px solid transparent;\n    border-top-left-radius: 3px;\n    border-top-right-radius: 3px;\n}\n\n.uirTranVis_panelTitle {\n    margin-top: 0;\n    margin-bottom: 0;\n    font-size: 16px;\n    color: inherit;\n}\n\n.uirTranVis_panelBody {\n    padding: 0 16px;\n}\n\n\n\n\n\n/* Styles go here */\n.uir-fade {\n    opacity: 0;\n    -webkit-transition: opacity .15s linear;\n    -o-transition: opacity .15s linear;\n    transition: opacity .15s linear;\n}\n\n.uir-fade.in {\n    opacity: 1;\n}\n\n.uirTranVis_modal-backdrop {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1040;\n    background-color: #000;\n}\n\n.uirTranVis_modal-backdrop.in {\n    filter: alpha(opacity=50);\n    opacity: .5;\n}\n\n.uirTranVis_modal {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1050;\n    display: block;\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n    outline: 0;\n}\n\n\n.uirTranVis_modal-dialog {\n    position: relative;\n    width: auto;\n    margin: 10px;\n}\n\n.uirTranVis_modal-content {\n    position: relative;\n    background-color: #fff;\n    -webkit-background-clip: padding-box;\n    background-clip: padding-box;\n    border: 1px solid #999;\n    border: 1px solid rgba(0, 0, 0, .2);\n    border-radius: 6px;\n    outline: 0;\n    -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, .5);\n    box-shadow: 0 3px 9px rgba(0, 0, 0, .5);\n}\n\n.uirTranVis_modal-header {\n    padding: 16px;\n    border-bottom: 1px solid #e5e5e5;\n}\n\n.uir-resolve-header {\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    background-color: cornflowerblue;\n}\n\n.uirTranVis_modalBody {\n    color: black;\n    position: relative;\n    padding: 16px;\n}\n\n.uirTranVis_modalFooter {\n    padding: 16px;\n    text-align: right;\n    border-top: 1px solid #e5e5e5;\n}\n\n.uir-icon {\n    display: inline-block;\n    height: 16px; width: 16px;\n    margin: 4px;\n    background-size: cover;\n    background-position: 0 0;\n}\n\n.uir-spin {\n    animation: uirspin 2s infinite;\n    transform: rotate(0deg);\n}\n\n.uir-rotate-35 {\n    transform: rotate(35deg);\n    opacity: 0.5;\n}\n\n@keyframes uirspin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n\n.uir-iconw-spinner       { background-image: url(\"../../images/w/16/spinner.png\"); }\n.uir-iconw-check         { background-image: url(\"../../images/w/16/check.png\"); }\n.uir-iconw-circle-o      { background-image: url(\"../../images/w/16/circle-o.png\"); }\n.uir-iconw-share         { background-image: url(\"../../images/w/16/share.png\"); }\n.uir-iconw-close         { background-image: url(\"../../images/w/16/close.png\"); }\n\n.uir-icon-thumb-tack     { background-image: url(\"../../images/16/thumb-tack.png\"); }\n.uir-icon-toggle-on      { background-image: url(\"../../images/16/toggle-on.png\"); }\n.uir-icon-toggle-off     { background-image: url(\"../../images/16/toggle-off.png\"); }\n";
styleInject(css_248z$1);

/**
 * This outer component manages the list of all transitions (history), and provides a fixed, scrolling viewport.
 * It attaches hooks for lifecycle events and decorates the transition with a descriptive message.
 */
var TransitionVisualizer = /** @class */ (function (_super) {
    __extends(TransitionVisualizer, _super);
    function TransitionVisualizer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.deregisterFns = [];
        _this.state = {
            transitions: [],
            pointerEvents: 'auto',
        };
        _this.cancelPreviousAnim = null;
        /**
         * Disable pointer events when the mouse is above the timeline
         *
         * This allows clicks to pass through the outer div to the user's app components
         * even when a transitionview details box is open and pinned.
         *
         * Enable pointer events when mouse is inside the timeline to allow horizontal scroll & scroll wheel
         */
        _this.onMouseMove = function (evt) {
            var windowHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
            var pointerEvents = windowHeight - evt.clientY < 65 ? 'auto' : 'none';
            if (_this.state.pointerEvents != pointerEvents) {
                _this.setState({ pointerEvents: pointerEvents });
            }
        };
        return _this;
    }
    /**
     * Creates a new TransitionVisualizer and adds it to the document.
     *
     * @param router the UIRouter object
     * @param element (optional) the element where the TransitionVisualizer should be placed.
     *                If no element is passed, an element will be created in the body.
     * @param props maximum transitions default: { maximumTransitions: 15 }
     *
     *
     * # Angular 1 + UI-Router (1.0.0-beta.2 and higher):
     *
     * Inject the router (`$uiRouter`) in a run block, then call TransitionVisualizer.create();
     *
     * ```
     * app.run(function($uiRouter) {
     *   TransitionVisualizer.create($uiRouter);
     * });
     * ```
     *
     * # Angular 1 + UI-Router 1.0.0-alpha.1 through 1.0.0-beta.1:
     *
     * Inject the router (`ng1UIRouter`) in a run block, then call TransitionVisualizer.create();
     *
     * ```
     * app.run(function(ng1UIRouter) {
     *   TransitionVisualizer.create(ng1UIRouter);
     * });
     * ```
     *
     * Angular 2:
     *
     * Call TransitionVisualizer.create() from your UIRouterConfig
     *
     * ```
     * export class MyUIRouterConfig extends UIRouterConfig {
     *   configure(router: UIRouter) {
     *     TransitionVisualizer.create(router);
     *   }
     * }
     * ```
     *
     * React:
     *
     * Call TransitionVisualizer.create() from your bootstrap
     *
     * ```
     * let router = new UIRouterReact();
     * TransitionVisualizer.create(router);
     * router.start();
     * ```
     *
     * @return the element that was bootstrapped.
     *         You can destroy the component using:
     *         [ReactDOM.unmountComponentAtNode](https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode)
     */
    TransitionVisualizer.create = function (router, element, props) {
        if (props === void 0) { props = {}; }
        if (!element) {
            element = document.createElement('div');
            element.id = 'uirTransitionVisualizer';
        }
        var initialProps = Object.assign({}, props, { router: router });
        var _render = function () {
            document.body.appendChild(element);
            M(v(TransitionVisualizer, initialProps), element);
        };
        if (document.readyState === 'interactive' || document.readyState === 'complete') {
            _render();
        }
        else {
            document.addEventListener('DOMContentLoaded', _render, false);
        }
        return element;
    };
    TransitionVisualizer.prototype.componentDidMount = function () {
        var _this = this;
        var dereg = this.props.router.transitionService.onBefore({}, function (trans) {
            _this.setState({ transitions: _this.state.transitions.concat(trans) });
            var duration = 750, el = _this._div.children[0];
            var scrollToRight = function () {
                var targetScrollX = el.scrollWidth - el.clientWidth + 200;
                _this.cancelPreviousAnim && _this.cancelPreviousAnim();
                var newVal = [targetScrollX], oldVal = [el.scrollLeft];
                var max = _this.props.maximumTransitions;
                var enforceMax = function () {
                    var list = _this.state.transitions;
                    if (list.length <= max)
                        return;
                    _this.setState({ transitions: list.slice(list.length - max) });
                };
                var callback = function (vals) { return (el.scrollLeft = vals[0]); };
                _this.cancelPreviousAnim = animatePath(newVal, oldVal, duration, callback, enforceMax, easing.easeInOutCubic);
            };
            setTimeout(scrollToRight, 25);
        });
        this.deregisterFns.push(dereg);
        document.body.addEventListener('mousemove', this.onMouseMove);
        this.deregisterFns.push(function () { return document.body.removeEventListener('mousemove', _this.onMouseMove); });
    };
    TransitionVisualizer.prototype.componentWillUnmount = function () {
        while (this.deregisterFns.length)
            this.deregisterFns.pop()();
    };
    TransitionVisualizer.prototype.render = function () {
        var _this = this;
        var pointerEvents = this.state.pointerEvents;
        return (v("div", { ref: function (el) { return (_this._div = el); } },
            v("div", { className: "uirTranVis_history", style: { pointerEvents: pointerEvents } },
                this.state.transitions.map(function (trans) { return (v("div", { key: trans.$id, className: "uirTranVis_transition" },
                    v(TransitionView, { transition: trans }),
                    v("div", { style: { minWidth: '18em', border: '1px solid transparent' } }))); }),
                v("div", { style: { width: '200px', height: '1px' } }))));
    };
    TransitionVisualizer.defaultProps = {
        router: null,
        maximumTransitions: 15,
    };
    return TransitionVisualizer;
}(d));

var visualizer = function (router) { return new Visualizer(router, {}); };
function unmountComponent(node) {
    var Nothing = function () { return null; };
    M(v(Nothing, null), document.body, node);
}
var DEFAULTS = {
    state: true,
    stateVisualizer: {},
    transition: true,
};
var Visualizer = /** @class */ (function () {
    function Visualizer(router, options) {
        this.router = router;
        this.name = 'visualizer';
        options = Object.assign({}, DEFAULTS, options);
        if (options.state) {
            this.stateVisualizerEl = StateVisualizer.create(router, undefined, undefined, options.stateVisualizer);
        }
        if (options.transition) {
            this.transitionVisualizerEl = TransitionVisualizer.create(router);
        }
    }
    Visualizer.prototype.dispose = function (router) {
        this.stateVisualizerEl && unmountComponent(this.stateVisualizerEl);
        this.transitionVisualizerEl && unmountComponent(this.transitionVisualizerEl);
        this.stateVisualizerEl = null;
        this.transitionVisualizerEl = null;
    };
    return Visualizer;
}());

export { StateSelector, StateTree, StateVisualizer, TransitionVisualizer, Visualizer, visualizer };
//# sourceMappingURL=ui-router-visualizer.esm.js.map
